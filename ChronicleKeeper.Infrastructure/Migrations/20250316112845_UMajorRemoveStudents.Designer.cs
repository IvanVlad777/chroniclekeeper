// <auto-generated />
using System;
using ChronicleKeeper.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ChronicleKeeper.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250316112845_UMajorRemoveStudents")]
    partial class UMajorRemoveStudents
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AbilityCharacter", b =>
                {
                    b.Property<int>("AbilitiesId")
                        .HasColumnType("int");

                    b.Property<int>("CharactersId")
                        .HasColumnType("int");

                    b.HasKey("AbilitiesId", "CharactersId");

                    b.HasIndex("CharactersId");

                    b.ToTable("AbilityCharacter");
                });

            modelBuilder.Entity("ArmyBattle", b =>
                {
                    b.Property<int>("BattlesId")
                        .HasColumnType("int");

                    b.Property<int>("ParticipatingArmiesId")
                        .HasColumnType("int");

                    b.HasKey("BattlesId", "ParticipatingArmiesId");

                    b.HasIndex("ParticipatingArmiesId");

                    b.ToTable("ArmyBattle");
                });

            modelBuilder.Entity("CharacterClothing", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("ClothingId")
                        .HasColumnType("int");

                    b.HasKey("CharacterId", "ClothingId");

                    b.HasIndex("ClothingId");

                    b.ToTable("CharacterClothing");
                });

            modelBuilder.Entity("CharacterFaction", b =>
                {
                    b.Property<int>("FactionsId")
                        .HasColumnType("int");

                    b.Property<int>("MembersId")
                        .HasColumnType("int");

                    b.HasKey("FactionsId", "MembersId");

                    b.HasIndex("MembersId");

                    b.ToTable("CharacterFaction");
                });

            modelBuilder.Entity("CharacterHobby", b =>
                {
                    b.Property<int>("HobbiesId")
                        .HasColumnType("int");

                    b.Property<int>("PractitionersId")
                        .HasColumnType("int");

                    b.HasKey("HobbiesId", "PractitionersId");

                    b.HasIndex("PractitionersId");

                    b.ToTable("CharacterHobby");
                });

            modelBuilder.Entity("CharacterSpecialisation", b =>
                {
                    b.Property<int>("ExpertsId")
                        .HasColumnType("int");

                    b.Property<int>("SpecialisationsId")
                        .HasColumnType("int");

                    b.HasKey("ExpertsId", "SpecialisationsId");

                    b.HasIndex("SpecialisationsId");

                    b.ToTable("CharacterSpecialisation");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Characters.Abilities.Ability", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HistoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("HistoryId");

                    b.ToTable("Abilities");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Characters.Abilities.AbilityLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AbilityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HistoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rank")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AbilityId")
                        .IsUnique()
                        .HasFilter("[AbilityId] IS NOT NULL");

                    b.HasIndex("HistoryId");

                    b.ToTable("AbilityLevels");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Characters.Character", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CharacterId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CulturalInstitutionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeathDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EyeColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FatherId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HairColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Height")
                        .HasColumnType("float");

                    b.Property<int?>("HistoryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsArtificial")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MotherId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NationId")
                        .HasColumnType("int");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProfessionId")
                        .HasColumnType("int");

                    b.Property<int?>("ReligionId")
                        .HasColumnType("int");

                    b.Property<int>("SapientSpeciesId")
                        .HasColumnType("int");

                    b.Property<int?>("SocialClassId")
                        .HasColumnType("int");

                    b.Property<string>("SpecialPhysicalFeatures")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TimelineEventId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UniversityMajorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<double?>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.HasIndex("CulturalInstitutionId");

                    b.HasIndex("FatherId");

                    b.HasIndex("HistoryId");

                    b.HasIndex("MotherId");

                    b.HasIndex("NationId");

                    b.HasIndex("ProfessionId");

                    b.HasIndex("ReligionId");

                    b.HasIndex("SapientSpeciesId");

                    b.HasIndex("SocialClassId");

                    b.HasIndex("TimelineEventId");

                    b.HasIndex("UniversityMajorId");

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Characters.CharacterInfo.CharacterRelationship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HistoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("HistoryId");

                    b.ToTable("CharacterRelationships");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Characters.CharacterInfo.Hobby", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Activity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HistoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("HistoryId");

                    b.ToTable("Hobbies");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Characters.Equipment.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CurrentOwnerId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FactionId")
                        .HasColumnType("int");

                    b.Property<int>("FactionType")
                        .HasColumnType("int");

                    b.Property<int?>("HistoryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsUnique")
                        .HasColumnType("bit");

                    b.Property<string>("Material")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rarity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpecialProperties")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StoredAtId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CurrentOwnerId");

                    b.HasIndex("FactionId");

                    b.HasIndex("HistoryId");

                    b.HasIndex("StoredAtId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Characters.Equipment.OwnershipHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HistoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("HistoryId");

                    b.ToTable("OwnershipHistories");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Content.Book.Chapter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.ToTable("Chapter");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Content.Content", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Content");

                    b.HasDiscriminator().HasValue("Content");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Content.Movie.Episode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("Season")
                        .HasColumnType("int");

                    b.Property<int>("SeriesId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SeriesId");

                    b.ToTable("Episode");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Content.Reference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ChapterId")
                        .HasColumnType("int");

                    b.Property<int?>("ContentId")
                        .HasColumnType("int");

                    b.Property<int?>("EpisodeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChapterId");

                    b.HasIndex("ContentId");

                    b.HasIndex("EpisodeId");

                    b.ToTable("Reference");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Geography.Climate.ClimateDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("AverageTemperature")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HistoryId")
                        .HasColumnType("int");

                    b.Property<double>("Humidity")
                        .HasColumnType("float");

                    b.Property<bool>("IsExtremeClimate")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NotableWeatherPhenomena")
                        .HasColumnType("int");

                    b.Property<double>("Precipitation")
                        .HasColumnType("float");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("WindDirection")
                        .HasColumnType("int");

                    b.Property<double>("WindSpeed")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("HistoryId");

                    b.ToTable("ClimateDetails");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Geography.Climate.ClimateZone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("AverageHumidity")
                        .HasColumnType("float");

                    b.Property<double>("AveragePrecipitation")
                        .HasColumnType("float");

                    b.Property<double>("AverageTemperature")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasDistinctSeasons")
                        .HasColumnType("bit");

                    b.Property<int?>("HistoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ZoneType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HistoryId");

                    b.ToTable("ClimateZones");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Geography.Climate.Season", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DurationInDays")
                        .HasColumnType("int");

                    b.Property<int?>("HistoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("TypicalPrecipitation")
                        .HasColumnType("float");

                    b.Property<double>("TypicalTemperature")
                        .HasColumnType("float");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("HistoryId");

                    b.ToTable("Seasons");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Geography.Climate.WeatherPattern", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClimateZoneId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Effects")
                        .HasColumnType("int");

                    b.Property<int>("Frequency")
                        .HasColumnType("int");

                    b.Property<int?>("HistoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatternType")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClimateZoneId");

                    b.HasIndex("HistoryId");

                    b.ToTable("WeatherPatterns");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Geography.Creatures.Creature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ArtificialOrigin")
                        .HasColumnType("int");

                    b.Property<double>("AverageLifespan")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<int?>("FungusId")
                        .HasColumnType("int");

                    b.Property<double>("Height")
                        .HasColumnType("float");

                    b.Property<int?>("HistoryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsArtificial")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSentient")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PlantId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("FungusId");

                    b.HasIndex("HistoryId");

                    b.HasIndex("PlantId");

                    b.ToTable("Creatures");

                    b.HasDiscriminator().HasValue("Creature");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Geography.Creatures.Sapient.Race", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Adaptations")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AppearanceTraits")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GeneticFeatures")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HistoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SapientSpeciesId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("HistoryId");

                    b.HasIndex("SapientSpeciesId");

                    b.ToTable("Races");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Geography.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ArchitectureStyleId")
                        .HasColumnType("int");

                    b.Property<double>("Area")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<int?>("HistoryId")
                        .HasColumnType("int");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentLocationId")
                        .HasColumnType("int");

                    b.Property<int>("Population")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ArchitectureStyleId");

                    b.HasIndex("HistoryId");

                    b.HasIndex("ParentLocationId");

                    b.ToTable("Locations");

                    b.HasDiscriminator().HasValue("Location");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.HistoryTimelines.History", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsOfficial")
                        .HasColumnType("bit");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Histories");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.HistoryTimelines.Timeline", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("HistoryId")
                        .HasColumnType("int");

                    b.Property<string>("PeriodName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("HistoryId");

                    b.ToTable("Timelines");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.HistoryTimelines.TimelineEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BattleId")
                        .HasColumnType("int");

                    b.Property<string>("Consequences")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FolkloreId")
                        .HasColumnType("int");

                    b.Property<bool>("IsMajorEvent")
                        .HasColumnType("bit");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<int>("TimelineId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BattleId");

                    b.HasIndex("FolkloreId");

                    b.HasIndex("LocationId");

                    b.HasIndex("TimelineId");

                    b.ToTable("TimelineEvents");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Miscellaneous.Mutation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Effect")
                        .HasColumnType("int");

                    b.Property<int?>("HistoryId")
                        .HasColumnType("int");

                    b.Property<int?>("MutantCreatureId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Origin")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("HistoryId");

                    b.HasIndex("MutantCreatureId");

                    b.ToTable("Mutations");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Professions.Apprenticeship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CorporationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DurationYears")
                        .HasColumnType("int");

                    b.Property<int?>("GuildId")
                        .HasColumnType("int");

                    b.Property<int?>("HistoryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProfessionId")
                        .HasColumnType("int");

                    b.Property<string>("SkillsTaught")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TradeSchoolId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CorporationId");

                    b.HasIndex("GuildId");

                    b.HasIndex("HistoryId");

                    b.HasIndex("ProfessionId");

                    b.HasIndex("TradeSchoolId");

                    b.ToTable("Apprenticeships");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Professions.JobRank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HistoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProfessionId")
                        .HasColumnType("int");

                    b.Property<int>("RankLevel")
                        .HasColumnType("int");

                    b.Property<string>("RankTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Responsibilities")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("HistoryId");

                    b.HasIndex("ProfessionId");

                    b.ToTable("JobRanks");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Professions.Profession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HistoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequiredSkills")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("WorkEnvironment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("HistoryId");

                    b.ToTable("Professions");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Professions.Specialisation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Field")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HistoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProfessionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("HistoryId");

                    b.HasIndex("ProfessionId");

                    b.ToTable("Specialisations");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Cultures.ArchitectureStyle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CultureId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DesignFeatures")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HistoryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsFortified")
                        .HasColumnType("bit");

                    b.Property<string>("MaterialsUsed")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CultureId");

                    b.HasIndex("HistoryId");

                    b.ToTable("ArchitectureStyles");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Cultures.ArtForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CultureId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HistoricalInfluences")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HistoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NotableArtists")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CultureId");

                    b.HasIndex("HistoryId");

                    b.ToTable("ArtForms");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Cultures.Clothing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClothingType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CultureId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DesignFeatures")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HistoryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsArmor")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRitualistic")
                        .HasColumnType("bit");

                    b.Property<string>("Materials")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpecialProperties")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CultureId");

                    b.HasIndex("HistoryId");

                    b.ToTable("CulturalClothings");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Cultures.Cuisine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CookingMethods")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CultureId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HistoryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsVegetarian")
                        .HasColumnType("bit");

                    b.Property<string>("MainIngredients")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypicalDishes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CultureId");

                    b.HasIndex("HistoryId");

                    b.ToTable("Cuisines");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Cultures.CulturalFestival", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Activities")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CultureId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DurationDays")
                        .HasColumnType("int");

                    b.Property<int?>("HistoryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsNationalHoliday")
                        .HasColumnType("bit");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CultureId");

                    b.HasIndex("HistoryId");

                    b.HasIndex("LocationId");

                    b.ToTable("CulturalFestivals");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Cultures.CulturalInstitution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CultureId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HistoryId")
                        .HasColumnType("int");

                    b.Property<string>("InstitutionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsGovernmentFunded")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CultureId");

                    b.HasIndex("HistoryId");

                    b.ToTable("CulturalInstitutions");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Cultures.Culture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CommonValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConflictResolution")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasOralTradition")
                        .HasColumnType("bit");

                    b.Property<int?>("HistoryId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ReligionId")
                        .HasColumnType("int");

                    b.Property<string>("SocialStructure")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TechnologicalLevel")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("XenophobiaLevel")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HistoryId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("ReligionId");

                    b.ToTable("Cultures");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Cultures.Custom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CultureId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HistoryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsUniversal")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CultureId");

                    b.HasIndex("HistoryId");

                    b.ToTable("Customs");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Cultures.Folklore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CultureId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HistoryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsHistorical")
                        .HasColumnType("bit");

                    b.Property<string>("Moral")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Story")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CultureId");

                    b.HasIndex("HistoryId");

                    b.ToTable("Folklores");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Cultures.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Dialects")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HistoryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsExtinct")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("WritingSystem")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("HistoryId");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Cultures.Myth", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreationStory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CultureId")
                        .HasColumnType("int");

                    b.Property<int>("DeityId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasReligiousConnections")
                        .HasColumnType("bit");

                    b.Property<int?>("HistoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ReligionId")
                        .HasColumnType("int");

                    b.Property<string>("Symbolism")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CultureId");

                    b.HasIndex("DeityId");

                    b.HasIndex("HistoryId");

                    b.HasIndex("ReligionId");

                    b.ToTable("Myths");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Cultures.Tradition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CultureId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HistoryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsReligious")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Practice")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ReligionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CultureId");

                    b.HasIndex("HistoryId");

                    b.HasIndex("ReligionId");

                    b.ToTable("Traditions");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Economy.BankingSystem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("AllowsLoans")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasStateControl")
                        .HasColumnType("bit");

                    b.Property<int?>("HistoryId")
                        .HasColumnType("int");

                    b.Property<double>("InterestRate")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SupportsForeignInvestment")
                        .HasColumnType("bit");

                    b.Property<string>("SystemType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("HistoryId");

                    b.ToTable("BankingSystems");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Economy.CorporateLeadership", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CorporationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HistoryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsMajorShareholder")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProfessionId")
                        .HasColumnType("int");

                    b.Property<double>("Salary")
                        .HasColumnType("float");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CorporationId");

                    b.HasIndex("HistoryId");

                    b.HasIndex("ProfessionId");

                    b.ToTable("CorporateLeaderships");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Economy.Corporation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BankingSystemId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HistoryId")
                        .HasColumnType("int");

                    b.Property<int?>("IndustryId")
                        .HasColumnType("int");

                    b.Property<string>("IndustrySector")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPubliclyTraded")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStateOwned")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfEmployees")
                        .HasColumnType("int");

                    b.Property<double>("Revenue")
                        .HasColumnType("float");

                    b.Property<int?>("TaxationSystemId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BankingSystemId");

                    b.HasIndex("HistoryId");

                    b.HasIndex("IndustryId");

                    b.HasIndex("TaxationSystemId");

                    b.ToTable("Corporations");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Economy.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BackingType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ExchangeRate")
                        .HasColumnType("float");

                    b.Property<int?>("HistoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("HistoryId");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Economy.EconomicSystem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("AllowsCorporations")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowsGuilds")
                        .HasColumnType("bit");

                    b.Property<int>("BankingSystemId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasStateControl")
                        .HasColumnType("bit");

                    b.Property<int?>("HistoryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsFeudal")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMarketDriven")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TaxationSystemId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BankingSystemId");

                    b.HasIndex("HistoryId");

                    b.HasIndex("TaxationSystemId");

                    b.ToTable("EconomicSystems");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Economy.ExtractionMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HistoryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsSustainable")
                        .HasColumnType("bit");

                    b.Property<string>("MethodType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("HistoryId");

                    b.ToTable("ExtractionMethods");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Economy.Guild", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EducationSystemId")
                        .HasColumnType("int");

                    b.Property<string>("GuildType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HistoryId")
                        .HasColumnType("int");

                    b.Property<int?>("IndustryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsGovernmentSanctioned")
                        .HasColumnType("bit");

                    b.Property<int?>("LegalSystemId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimaryActivity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TaxationSystemId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EducationSystemId");

                    b.HasIndex("HistoryId");

                    b.HasIndex("IndustryId");

                    b.HasIndex("LegalSystemId");

                    b.HasIndex("TaxationSystemId");

                    b.ToTable("Guilds");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Economy.GuildRank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GuildId")
                        .HasColumnType("int");

                    b.Property<bool>("HasLeadershipAuthority")
                        .HasColumnType("bit");

                    b.Property<int?>("HistoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RankLevel")
                        .HasColumnType("int");

                    b.Property<string>("RankTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("GuildId");

                    b.HasIndex("HistoryId");

                    b.ToTable("GuildRanks");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Economy.Industry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("EmploymentRate")
                        .HasColumnType("float");

                    b.Property<int?>("HistoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sector")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("HistoryId");

                    b.ToTable("Industries");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Economy.NaturalResource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExtractionMethodId")
                        .HasColumnType("int");

                    b.Property<int?>("HistoryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsRenewable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStrategicResource")
                        .HasColumnType("bit");

                    b.Property<double>("MarketValue")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.Property<string>("ResourceType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ExtractionMethodId");

                    b.HasIndex("HistoryId");

                    b.ToTable("NaturalResources");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Economy.TaxationSystem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("CorporateTaxRate")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasFlatTax")
                        .HasColumnType("bit");

                    b.Property<bool>("HasWealthTax")
                        .HasColumnType("bit");

                    b.Property<int?>("HistoryId")
                        .HasColumnType("int");

                    b.Property<double>("IncomeTaxRate")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("TradeTariffRate")
                        .HasColumnType("float");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("HistoryId");

                    b.ToTable("TaxationSystems");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Economy.TradeRoute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HistoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("HistoryId");

                    b.ToTable("TradeRoutes");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Education.EducationRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CharacterId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Degree")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("GuildId")
                        .HasColumnType("int");

                    b.Property<int?>("HistoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SchoolId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UniversityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.HasIndex("GuildId");

                    b.HasIndex("HistoryId");

                    b.HasIndex("SchoolId");

                    b.HasIndex("UniversityId");

                    b.ToTable("EducationRecords");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Education.EducationSystem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("AllowsPrivateInstitutions")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HistoryId")
                        .HasColumnType("int");

                    b.Property<bool>("IncludesReligiousEducation")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStateControlled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SupportsGuildTraining")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("HistoryId");

                    b.ToTable("EducationSystems");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Education.Library", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("FocusesOnHistory")
                        .HasColumnType("bit");

                    b.Property<bool>("FocusesOnMagic")
                        .HasColumnType("bit");

                    b.Property<int?>("HistoryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UniversityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("HistoryId");

                    b.HasIndex("LocationId");

                    b.HasIndex("UniversityId");

                    b.ToTable("Libraries");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Education.ReligiousEducation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CompletionDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HistoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Ordained")
                        .HasColumnType("bit");

                    b.Property<int>("ReligionId")
                        .HasColumnType("int");

                    b.Property<int>("ReligiousOrderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("HistoryId");

                    b.HasIndex("ReligionId");

                    b.HasIndex("ReligiousOrderId");

                    b.ToTable("ReligiousEducations");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Education.School", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<int>("EducationSystemId")
                        .HasColumnType("int");

                    b.Property<int?>("HistoryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReligious")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EducationSystemId");

                    b.HasIndex("HistoryId");

                    b.ToTable("Schools");

                    b.HasDiscriminator().HasValue("School");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Education.SchoolSubject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HistoryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsMandatory")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.Property<string>("SubjectName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("HistoryId");

                    b.HasIndex("SchoolId");

                    b.ToTable("SchoolSubjects");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Education.University", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EducationSystemId")
                        .HasColumnType("int");

                    b.Property<bool>("FocusesOnMagic")
                        .HasColumnType("bit");

                    b.Property<bool>("FocusesOnMilitaryStudies")
                        .HasColumnType("bit");

                    b.Property<bool>("FocusesOnPhilosophy")
                        .HasColumnType("bit");

                    b.Property<bool>("FocusesOnScience")
                        .HasColumnType("bit");

                    b.Property<int?>("HistoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EducationSystemId");

                    b.HasIndex("HistoryId");

                    b.ToTable("Universities");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Education.UniversityMajor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DegreeLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HistoryId")
                        .HasColumnType("int");

                    b.Property<string>("MajorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UniversityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("HistoryId");

                    b.HasIndex("UniversityId");

                    b.ToTable("UniversityMajors");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Faction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HistoryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsSecretive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("HistoryId");

                    b.ToTable("Factions");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Military.Army", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FactionId")
                        .HasColumnType("int");

                    b.Property<int?>("HistoryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsStandingArmy")
                        .HasColumnType("bit");

                    b.Property<int?>("MilitaryOrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CityId")
                        .IsUnique()
                        .HasFilter("[CityId] IS NOT NULL");

                    b.HasIndex("FactionId")
                        .IsUnique()
                        .HasFilter("[FactionId] IS NOT NULL");

                    b.HasIndex("HistoryId");

                    b.HasIndex("MilitaryOrganizationId");

                    b.ToTable("Armies");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Military.Battle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BattleDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HistoryId")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Outcome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("HistoryId");

                    b.ToTable("Battles");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Military.MilitaryDoctrine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HistoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Philosophy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PrioritizesAirForces")
                        .HasColumnType("bit");

                    b.Property<bool>("PrioritizesArtillery")
                        .HasColumnType("bit");

                    b.Property<bool>("PrioritizesCavalry")
                        .HasColumnType("bit");

                    b.Property<bool>("PrioritizesInfantry")
                        .HasColumnType("bit");

                    b.Property<bool>("PrioritizesNavalForces")
                        .HasColumnType("bit");

                    b.Property<bool>("RequiresHeavyIndustry")
                        .HasColumnType("bit");

                    b.Property<string>("Strategy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("UsesMercenaries")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("HistoryId");

                    b.ToTable("MilitaryDoctrines");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Military.MilitaryEquipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EquipmentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HistoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("HistoryId");

                    b.ToTable("MilitaryEquipment");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Military.MilitaryOrganization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HistoryId")
                        .HasColumnType("int");

                    b.Property<int>("MilitaryDoctrineId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("HistoryId");

                    b.HasIndex("MilitaryDoctrineId");

                    b.ToTable("MilitaryOrganizations");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Military.MilitaryRank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HistoryId")
                        .HasColumnType("int");

                    b.Property<int>("MilitaryUnitId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RankLevel")
                        .HasColumnType("int");

                    b.Property<string>("RankTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("HistoryId");

                    b.HasIndex("MilitaryUnitId");

                    b.ToTable("MilitaryRanks");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Military.MilitaryUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BelongsToArmyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HistoryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsElite")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.Property<string>("UnitType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BelongsToArmyId");

                    b.HasIndex("HistoryId");

                    b.ToTable("MilitaryUnits");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Nationality.Nation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HistoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Population")
                        .HasColumnType("int");

                    b.Property<int?>("SocialHierarchyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("HistoryId");

                    b.HasIndex("SocialHierarchyId");

                    b.ToTable("Nations");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Politics.GovernmentSystem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ElectionSystem")
                        .HasColumnType("int");

                    b.Property<bool>("HasTermLimits")
                        .HasColumnType("bit");

                    b.Property<int?>("HistoryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsCentralized")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDemocratic")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFederal")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMonarchic")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReligious")
                        .HasColumnType("bit");

                    b.Property<int?>("MaxTermLength")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PoliticalIdeologyId")
                        .HasColumnType("int");

                    b.Property<int>("StabilityLevel")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("HistoryId");

                    b.HasIndex("PoliticalIdeologyId");

                    b.ToTable("GovernmentSystems");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Politics.LegalSystem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HistoryId")
                        .HasColumnType("int");

                    b.Property<int>("JudicialIndependence")
                        .HasColumnType("int");

                    b.Property<string>("Laws")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PunishmentMethods")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("HistoryId");

                    b.ToTable("LegalSystems");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Politics.PoliticalIdeology", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HistoryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsAuthoritarian")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLiberal")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMilitaristic")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRadical")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSocialist")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SupportsFreeMarket")
                        .HasColumnType("bit");

                    b.Property<bool>("SupportsPlannedEconomy")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("HistoryId");

                    b.ToTable("PoliticalIdeologies");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Politics.PoliticalParty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GovernmentSystemId")
                        .HasColumnType("int");

                    b.Property<int?>("HistoryId")
                        .HasColumnType("int");

                    b.Property<string>("IdeologyDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InfluenceLevel")
                        .HasColumnType("int");

                    b.Property<bool>("IsBanned")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PoliticalIdeologyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("GovernmentSystemId");

                    b.HasIndex("HistoryId");

                    b.HasIndex("PoliticalIdeologyId");

                    b.ToTable("PoliticalParties");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Politics.PrivilegeLaw", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("AllowsPrivateArmies")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("GrantsLandOwnershipRights")
                        .HasColumnType("bit");

                    b.Property<bool>("GrantsLegalImmunity")
                        .HasColumnType("bit");

                    b.Property<int?>("HistoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SocialClassId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("HistoryId");

                    b.HasIndex("SocialClassId");

                    b.ToTable("PrivilegeLaws");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Religions.HolySite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeityId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HistoryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsPilgrimageDestination")
                        .HasColumnType("bit");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReligionId")
                        .HasColumnType("int");

                    b.Property<string>("Significance")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DeityId");

                    b.HasIndex("HistoryId");

                    b.HasIndex("LocationId");

                    b.HasIndex("ReligionId");

                    b.ToTable("HolySites");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Religions.Religion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CoreBeliefs")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasDeities")
                        .HasColumnType("bit");

                    b.Property<int?>("HistoryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsStateReligion")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NationId")
                        .HasColumnType("int");

                    b.Property<string>("Practices")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("HistoryId");

                    b.HasIndex("NationId");

                    b.ToTable("Religions");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Religions.ReligiousFestival", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DurationDays")
                        .HasColumnType("int");

                    b.Property<int?>("HistoryId")
                        .HasColumnType("int");

                    b.Property<int?>("HolySiteId")
                        .HasColumnType("int");

                    b.Property<bool>("IsPilgrimageEvent")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReligionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Traditions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("HistoryId");

                    b.ToTable("ReligiousFestivals");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Religions.ReligiousOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Beliefs")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HistoryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsMilitant")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSecretive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ReligionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("HistoryId");

                    b.HasIndex("ReligionId");

                    b.ToTable("ReligiousOrders");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Religions.ReligiousText", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ContentSummary")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeityId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HistoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReligionId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DeityId");

                    b.HasIndex("HistoryId");

                    b.HasIndex("ReligionId");

                    b.ToTable("ReligiousTexts");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Structure.SocialClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("CanHoldOffice")
                        .HasColumnType("bit");

                    b.Property<bool>("CanOwnLand")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasTaxExemptions")
                        .HasColumnType("bit");

                    b.Property<int?>("HistoryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsMerchantClass")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNoble")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOutcast")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SocialHierarchyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("HistoryId");

                    b.HasIndex("SocialHierarchyId");

                    b.ToTable("SocialClasses");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Structure.SocialHierarchy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("AllowsIntermarriage")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowsUpwardMobility")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EnforcesLegalSeparation")
                        .HasColumnType("bit");

                    b.Property<int?>("HistoryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsCasteSystem")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("HistoryId");

                    b.ToTable("SocialHierarchies");
                });

            modelBuilder.Entity("CityCorporation", b =>
                {
                    b.Property<int>("CorporationsId")
                        .HasColumnType("int");

                    b.Property<int>("PresentInCitiesId")
                        .HasColumnType("int");

                    b.HasKey("CorporationsId", "PresentInCitiesId");

                    b.HasIndex("PresentInCitiesId");

                    b.ToTable("CityCorporation");
                });

            modelBuilder.Entity("CityCreature", b =>
                {
                    b.Property<int>("CitiesItInhabitsId")
                        .HasColumnType("int");

                    b.Property<int>("CreatureId")
                        .HasColumnType("int");

                    b.HasKey("CitiesItInhabitsId", "CreatureId");

                    b.HasIndex("CreatureId");

                    b.ToTable("CityCreature");
                });

            modelBuilder.Entity("CityCulture", b =>
                {
                    b.Property<int>("PredominantCulturesId")
                        .HasColumnType("int");

                    b.Property<int>("PredominantInCitiesId")
                        .HasColumnType("int");

                    b.HasKey("PredominantCulturesId", "PredominantInCitiesId");

                    b.HasIndex("PredominantInCitiesId");

                    b.ToTable("CityCulture");
                });

            modelBuilder.Entity("CityGuild", b =>
                {
                    b.Property<int>("GuildsId")
                        .HasColumnType("int");

                    b.Property<int>("PresentInCitiesId")
                        .HasColumnType("int");

                    b.HasKey("GuildsId", "PresentInCitiesId");

                    b.HasIndex("PresentInCitiesId");

                    b.ToTable("CityGuild");
                });

            modelBuilder.Entity("CityNation", b =>
                {
                    b.Property<int>("CitiesId")
                        .HasColumnType("int");

                    b.Property<int>("NationsId")
                        .HasColumnType("int");

                    b.HasKey("CitiesId", "NationsId");

                    b.HasIndex("NationsId");

                    b.ToTable("CityNation");
                });

            modelBuilder.Entity("CityPoliticalParty", b =>
                {
                    b.Property<int>("CitiesId")
                        .HasColumnType("int");

                    b.Property<int>("PoliticalPartiesId")
                        .HasColumnType("int");

                    b.HasKey("CitiesId", "PoliticalPartiesId");

                    b.HasIndex("PoliticalPartiesId");

                    b.ToTable("CityPoliticalParty");
                });

            modelBuilder.Entity("CityReligion", b =>
                {
                    b.Property<int>("InCitiesId")
                        .HasColumnType("int");

                    b.Property<int>("ReligionId")
                        .HasColumnType("int");

                    b.HasKey("InCitiesId", "ReligionId");

                    b.HasIndex("ReligionId");

                    b.ToTable("CityReligion");
                });

            modelBuilder.Entity("ClimateDetailClimateZone", b =>
                {
                    b.Property<int>("ClimateZoneId")
                        .HasColumnType("int");

                    b.Property<int>("ClimatesId")
                        .HasColumnType("int");

                    b.HasKey("ClimateZoneId", "ClimatesId");

                    b.HasIndex("ClimatesId");

                    b.ToTable("ClimateDetailClimateZone");
                });

            modelBuilder.Entity("ClimateZoneLocation", b =>
                {
                    b.Property<int>("ClimateConditionsId")
                        .HasColumnType("int");

                    b.Property<int>("LocationsId")
                        .HasColumnType("int");

                    b.HasKey("ClimateConditionsId", "LocationsId");

                    b.HasIndex("LocationsId");

                    b.ToTable("ClimateZoneLocation");
                });

            modelBuilder.Entity("ClimateZoneSeason", b =>
                {
                    b.Property<int>("ClimateZoneId")
                        .HasColumnType("int");

                    b.Property<int>("SeasonsId")
                        .HasColumnType("int");

                    b.HasKey("ClimateZoneId", "SeasonsId");

                    b.HasIndex("SeasonsId");

                    b.ToTable("ClimateZoneSeason");
                });

            modelBuilder.Entity("CorporationCountry", b =>
                {
                    b.Property<int>("CorporationsId")
                        .HasColumnType("int");

                    b.Property<int>("PresentInCountriesId")
                        .HasColumnType("int");

                    b.HasKey("CorporationsId", "PresentInCountriesId");

                    b.HasIndex("PresentInCountriesId");

                    b.ToTable("CorporationCountry");
                });

            modelBuilder.Entity("CorporationFaction", b =>
                {
                    b.Property<int>("FactionsId")
                        .HasColumnType("int");

                    b.Property<int>("FinancialBackersId")
                        .HasColumnType("int");

                    b.HasKey("FactionsId", "FinancialBackersId");

                    b.HasIndex("FinancialBackersId");

                    b.ToTable("CorporationFaction");
                });

            modelBuilder.Entity("CorporationProfession", b =>
                {
                    b.Property<int>("CorporationsId")
                        .HasColumnType("int");

                    b.Property<int>("MemberProfessionsId")
                        .HasColumnType("int");

                    b.HasKey("CorporationsId", "MemberProfessionsId");

                    b.HasIndex("MemberProfessionsId");

                    b.ToTable("CorporationProfession");
                });

            modelBuilder.Entity("CountryCulture", b =>
                {
                    b.Property<int>("PredominantCulturesId")
                        .HasColumnType("int");

                    b.Property<int>("PredominantInCountriesId")
                        .HasColumnType("int");

                    b.HasKey("PredominantCulturesId", "PredominantInCountriesId");

                    b.HasIndex("PredominantInCountriesId");

                    b.ToTable("CountryCulture");
                });

            modelBuilder.Entity("CountryFaction", b =>
                {
                    b.Property<int>("FactionsId")
                        .HasColumnType("int");

                    b.Property<int>("OperatesInCountriesId")
                        .HasColumnType("int");

                    b.HasKey("FactionsId", "OperatesInCountriesId");

                    b.HasIndex("OperatesInCountriesId");

                    b.ToTable("CountryFaction");
                });

            modelBuilder.Entity("CountryGuild", b =>
                {
                    b.Property<int>("GuildsId")
                        .HasColumnType("int");

                    b.Property<int>("PresentInCountriesId")
                        .HasColumnType("int");

                    b.HasKey("GuildsId", "PresentInCountriesId");

                    b.HasIndex("PresentInCountriesId");

                    b.ToTable("CountryGuild");
                });

            modelBuilder.Entity("CountryMilitaryOrganization", b =>
                {
                    b.Property<int>("CountriesId")
                        .HasColumnType("int");

                    b.Property<int>("MilitaryOrganizationsId")
                        .HasColumnType("int");

                    b.HasKey("CountriesId", "MilitaryOrganizationsId");

                    b.HasIndex("MilitaryOrganizationsId");

                    b.ToTable("CountryMilitaryOrganization");
                });

            modelBuilder.Entity("CountryNation", b =>
                {
                    b.Property<int>("CountriesId")
                        .HasColumnType("int");

                    b.Property<int>("NationsId")
                        .HasColumnType("int");

                    b.HasKey("CountriesId", "NationsId");

                    b.HasIndex("NationsId");

                    b.ToTable("CountryNation");
                });

            modelBuilder.Entity("CountryPoliticalParty", b =>
                {
                    b.Property<int>("CountriesId")
                        .HasColumnType("int");

                    b.Property<int>("PoliticalPartiesId")
                        .HasColumnType("int");

                    b.HasKey("CountriesId", "PoliticalPartiesId");

                    b.HasIndex("PoliticalPartiesId");

                    b.ToTable("CountryPoliticalParty");
                });

            modelBuilder.Entity("CountryReligion", b =>
                {
                    b.Property<int>("InCountriesId")
                        .HasColumnType("int");

                    b.Property<int>("ReligionsId")
                        .HasColumnType("int");

                    b.HasKey("InCountriesId", "ReligionsId");

                    b.HasIndex("ReligionsId");

                    b.ToTable("CountryReligion");
                });

            modelBuilder.Entity("CreatureEcosystem", b =>
                {
                    b.Property<int>("HabitantsId")
                        .HasColumnType("int");

                    b.Property<int>("NaturalHabitatsId")
                        .HasColumnType("int");

                    b.HasKey("HabitantsId", "NaturalHabitatsId");

                    b.HasIndex("NaturalHabitatsId");

                    b.ToTable("CreatureEcosystem");
                });

            modelBuilder.Entity("CultureNation", b =>
                {
                    b.Property<int>("CultureId")
                        .HasColumnType("int");

                    b.Property<int>("NationId")
                        .HasColumnType("int");

                    b.HasKey("CultureId", "NationId");

                    b.HasIndex("NationId");

                    b.ToTable("CultureNation");
                });

            modelBuilder.Entity("CultureSapientSpecies", b =>
                {
                    b.Property<int>("CulturesId")
                        .HasColumnType("int");

                    b.Property<int>("PracticedBySpeciesId")
                        .HasColumnType("int");

                    b.HasKey("CulturesId", "PracticedBySpeciesId");

                    b.HasIndex("PracticedBySpeciesId");

                    b.ToTable("CultureSapientSpecies");
                });

            modelBuilder.Entity("CultureSocialClass", b =>
                {
                    b.Property<int>("CulturesId")
                        .HasColumnType("int");

                    b.Property<int>("InfluencedSocialClassesId")
                        .HasColumnType("int");

                    b.HasKey("CulturesId", "InfluencedSocialClassesId");

                    b.HasIndex("InfluencedSocialClassesId");

                    b.ToTable("CultureSocialClass");
                });

            modelBuilder.Entity("DeityDeity", b =>
                {
                    b.Property<int>("AlliedDeitiesId")
                        .HasColumnType("int");

                    b.Property<int>("RivalDeitiesId")
                        .HasColumnType("int");

                    b.HasKey("AlliedDeitiesId", "RivalDeitiesId");

                    b.HasIndex("RivalDeitiesId");

                    b.ToTable("DeityDeity");
                });

            modelBuilder.Entity("DeityReligiousOrder", b =>
                {
                    b.Property<int>("DeitiesId")
                        .HasColumnType("int");

                    b.Property<int>("OrdersDedicatedToDeityId")
                        .HasColumnType("int");

                    b.HasKey("DeitiesId", "OrdersDedicatedToDeityId");

                    b.HasIndex("OrdersDedicatedToDeityId");

                    b.ToTable("DeityReligiousOrder");
                });

            modelBuilder.Entity("FactionGuild", b =>
                {
                    b.Property<int>("ConnectedGuildsId")
                        .HasColumnType("int");

                    b.Property<int>("FactionsId")
                        .HasColumnType("int");

                    b.HasKey("ConnectedGuildsId", "FactionsId");

                    b.HasIndex("FactionsId");

                    b.ToTable("FactionGuild");
                });

            modelBuilder.Entity("FactionMilitaryOrganization", b =>
                {
                    b.Property<int>("FactionsId")
                        .HasColumnType("int");

                    b.Property<int>("MilitaryConnectionsId")
                        .HasColumnType("int");

                    b.HasKey("FactionsId", "MilitaryConnectionsId");

                    b.HasIndex("MilitaryConnectionsId");

                    b.ToTable("FactionMilitaryOrganization");
                });

            modelBuilder.Entity("FactionPoliticalParty", b =>
                {
                    b.Property<int>("FactionsId")
                        .HasColumnType("int");

                    b.Property<int>("PoliticalConnectionsId")
                        .HasColumnType("int");

                    b.HasKey("FactionsId", "PoliticalConnectionsId");

                    b.HasIndex("PoliticalConnectionsId");

                    b.ToTable("FactionPoliticalParty");
                });

            modelBuilder.Entity("FactionReligiousOrder", b =>
                {
                    b.Property<int>("FactionsId")
                        .HasColumnType("int");

                    b.Property<int>("ReligiousConnectionsId")
                        .HasColumnType("int");

                    b.HasKey("FactionsId", "ReligiousConnectionsId");

                    b.HasIndex("ReligiousConnectionsId");

                    b.ToTable("FactionReligiousOrder");
                });

            modelBuilder.Entity("FolkloreSapientSpecies", b =>
                {
                    b.Property<int>("FolkloreId")
                        .HasColumnType("int");

                    b.Property<int>("OriginatedFromSpeciesId")
                        .HasColumnType("int");

                    b.HasKey("FolkloreId", "OriginatedFromSpeciesId");

                    b.HasIndex("OriginatedFromSpeciesId");

                    b.ToTable("FolkloreSapientSpecies");
                });

            modelBuilder.Entity("GuildProfession", b =>
                {
                    b.Property<int>("GuildsId")
                        .HasColumnType("int");

                    b.Property<int>("MemberProfessionsId")
                        .HasColumnType("int");

                    b.HasKey("GuildsId", "MemberProfessionsId");

                    b.HasIndex("MemberProfessionsId");

                    b.ToTable("GuildProfession");
                });

            modelBuilder.Entity("GuildSocialClass", b =>
                {
                    b.Property<int>("GuildsId")
                        .HasColumnType("int");

                    b.Property<int>("SocialClassesId")
                        .HasColumnType("int");

                    b.HasKey("GuildsId", "SocialClassesId");

                    b.HasIndex("SocialClassesId");

                    b.ToTable("GuildSocialClass");
                });

            modelBuilder.Entity("LanguageNation", b =>
                {
                    b.Property<int>("LanguagesSpokenId")
                        .HasColumnType("int");

                    b.Property<int>("NationsId")
                        .HasColumnType("int");

                    b.HasKey("LanguagesSpokenId", "NationsId");

                    b.HasIndex("NationsId");

                    b.ToTable("LanguageNation");
                });

            modelBuilder.Entity("LocationNaturalResource", b =>
                {
                    b.Property<int>("LocationsId")
                        .HasColumnType("int");

                    b.Property<int>("NaturalResourcesId")
                        .HasColumnType("int");

                    b.HasKey("LocationsId", "NaturalResourcesId");

                    b.HasIndex("NaturalResourcesId");

                    b.ToTable("LocationNaturalResource");
                });

            modelBuilder.Entity("LocationTradeRoute", b =>
                {
                    b.Property<int>("LocationsId")
                        .HasColumnType("int");

                    b.Property<int>("TradeRoutesId")
                        .HasColumnType("int");

                    b.HasKey("LocationsId", "TradeRoutesId");

                    b.HasIndex("TradeRoutesId");

                    b.ToTable("LocationTradeRoute");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MilitaryEquipmentMilitaryUnit", b =>
                {
                    b.Property<int>("EquipmentId")
                        .HasColumnType("int");

                    b.Property<int>("MilitaryUnitsId")
                        .HasColumnType("int");

                    b.HasKey("EquipmentId", "MilitaryUnitsId");

                    b.HasIndex("MilitaryUnitsId");

                    b.ToTable("MilitaryEquipmentMilitaryUnit");
                });

            modelBuilder.Entity("NationPoliticalParty", b =>
                {
                    b.Property<int>("NationsId")
                        .HasColumnType("int");

                    b.Property<int>("PoliticalPartiesId")
                        .HasColumnType("int");

                    b.HasKey("NationsId", "PoliticalPartiesId");

                    b.HasIndex("PoliticalPartiesId");

                    b.ToTable("NationPoliticalParty");
                });

            modelBuilder.Entity("NaturalResourceTradeRoute", b =>
                {
                    b.Property<int>("ExportRoutesId")
                        .HasColumnType("int");

                    b.Property<int>("ResourcesTradedId")
                        .HasColumnType("int");

                    b.HasKey("ExportRoutesId", "ResourcesTradedId");

                    b.HasIndex("ResourcesTradedId");

                    b.ToTable("NaturalResourceTradeRoute");
                });

            modelBuilder.Entity("ProfessionSapientSpecies", b =>
                {
                    b.Property<int>("FrequentOccupationsId")
                        .HasColumnType("int");

                    b.Property<int>("PracticedBySpeciesId")
                        .HasColumnType("int");

                    b.HasKey("FrequentOccupationsId", "PracticedBySpeciesId");

                    b.HasIndex("PracticedBySpeciesId");

                    b.ToTable("ProfessionSapientSpecies");
                });

            modelBuilder.Entity("ProfessionSocialClass", b =>
                {
                    b.Property<int>("SocialClassesId")
                        .HasColumnType("int");

                    b.Property<int>("TypicalProfessionsId")
                        .HasColumnType("int");

                    b.HasKey("SocialClassesId", "TypicalProfessionsId");

                    b.HasIndex("TypicalProfessionsId");

                    b.ToTable("ProfessionSocialClass");
                });

            modelBuilder.Entity("ProfessionTradeSchool", b =>
                {
                    b.Property<int>("TradeSchoolsId")
                        .HasColumnType("int");

                    b.Property<int>("TrainedProfessionsId")
                        .HasColumnType("int");

                    b.HasKey("TradeSchoolsId", "TrainedProfessionsId");

                    b.HasIndex("TrainedProfessionsId");

                    b.ToTable("ProfessionTradeSchool");
                });

            modelBuilder.Entity("RegionSapientSpecies", b =>
                {
                    b.Property<int>("NativeRegionsId")
                        .HasColumnType("int");

                    b.Property<int>("OriginOfSapientSpeciesId")
                        .HasColumnType("int");

                    b.HasKey("NativeRegionsId", "OriginOfSapientSpeciesId");

                    b.HasIndex("OriginOfSapientSpeciesId");

                    b.ToTable("RegionSapientSpecies");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Content.Book.Book", b =>
                {
                    b.HasBaseType("ChronicleKeeper.Core.Entities.Content.Content");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.HasDiscriminator().HasValue("Book");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Content.Movie.Series", b =>
                {
                    b.HasBaseType("ChronicleKeeper.Core.Entities.Content.Content");

                    b.Property<string>("Creator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Seasons")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("Series");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Geography.Creatures.Animals.Animal", b =>
                {
                    b.HasBaseType("ChronicleKeeper.Core.Entities.Geography.Creatures.Creature");

                    b.Property<int?>("AnimalId")
                        .HasColumnType("int");

                    b.Property<int>("Diet")
                        .HasColumnType("int");

                    b.Property<bool>("HasMultipleHeads")
                        .HasColumnType("bit");

                    b.Property<bool>("HasRegeneration")
                        .HasColumnType("bit");

                    b.Property<bool>("HasWings")
                        .HasColumnType("bit");

                    b.Property<string>("Intelligence")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAggressive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDomesticated")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEndangered")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMythical")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPackAnimal")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSacred")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSymbiotic")
                        .HasColumnType("bit");

                    b.Property<int>("NumberOfLegs")
                        .HasColumnType("int");

                    b.Property<string>("SpecialAbilities")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("AnimalId");

                    b.HasDiscriminator().HasValue("Animal");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Geography.Creatures.Fungi.Fungus", b =>
                {
                    b.HasBaseType("ChronicleKeeper.Core.Entities.Geography.Creatures.Creature");

                    b.Property<int?>("AnimalId")
                        .HasColumnType("int");

                    b.Property<bool>("CanCommunicate")
                        .HasColumnType("bit");

                    b.Property<int?>("FungusId1")
                        .HasColumnType("int");

                    b.Property<bool>("HasMutagenicProperties")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBioluminescent")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEdible")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHallucinogenic")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMedicinal")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPoisonous")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSymbiotic")
                        .HasColumnType("bit");

                    b.Property<string>("MythologicalSignificance")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ScientificName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpecialProperties")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("AnimalId");

                    b.HasIndex("FungusId1");

                    b.ToTable("Creatures", t =>
                        {
                            t.Property("AnimalId")
                                .HasColumnName("Fungus_AnimalId");

                            t.Property("IsSymbiotic")
                                .HasColumnName("Fungus_IsSymbiotic");
                        });

                    b.HasDiscriminator().HasValue("Fungus");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Geography.Creatures.Plants.Plant", b =>
                {
                    b.HasBaseType("ChronicleKeeper.Core.Entities.Geography.Creatures.Creature");

                    b.Property<int?>("AnimalId")
                        .HasColumnType("int");

                    b.Property<bool>("CanMove")
                        .HasColumnType("bit");

                    b.Property<bool>("HasRegenerativeProperties")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBioluminescent")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCarnivorous")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMedicinal")
                        .HasColumnType("bit");

                    b.Property<bool>("IsParasitic")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPoisonous")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSymbiotic")
                        .HasColumnType("bit");

                    b.Property<string>("MythologicalSignificance")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PlantId1")
                        .HasColumnType("int");

                    b.Property<int>("PlantType")
                        .HasColumnType("int");

                    b.Property<int>("PreferredSoil")
                        .HasColumnType("int");

                    b.Property<int>("Rarity")
                        .HasColumnType("int");

                    b.Property<string>("ScientificName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpecialProperties")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Sunlight")
                        .HasColumnType("int");

                    b.Property<int>("TemperatureRange")
                        .HasColumnType("int");

                    b.HasIndex("AnimalId");

                    b.HasIndex("PlantId1");

                    b.ToTable("Creatures", t =>
                        {
                            t.Property("AnimalId")
                                .HasColumnName("Plant_AnimalId");

                            t.Property("IsBioluminescent")
                                .HasColumnName("Plant_IsBioluminescent");

                            t.Property("IsMedicinal")
                                .HasColumnName("Plant_IsMedicinal");

                            t.Property("IsPoisonous")
                                .HasColumnName("Plant_IsPoisonous");

                            t.Property("IsSymbiotic")
                                .HasColumnName("Plant_IsSymbiotic");

                            t.Property("MythologicalSignificance")
                                .HasColumnName("Plant_MythologicalSignificance");

                            t.Property("ScientificName")
                                .HasColumnName("Plant_ScientificName");

                            t.Property("SpecialProperties")
                                .HasColumnName("Plant_SpecialProperties");
                        });

                    b.HasDiscriminator().HasValue("Plant");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Geography.Creatures.Sapient.SapientSpecies", b =>
                {
                    b.HasBaseType("ChronicleKeeper.Core.Entities.Geography.Creatures.Creature");

                    b.Property<string>("CommonName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsHumanoid")
                        .HasColumnType("bit");

                    b.Property<int?>("ReligionId1")
                        .HasColumnType("int");

                    b.Property<int>("SapientType")
                        .HasColumnType("int");

                    b.Property<string>("ScientificName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("ReligionId1");

                    b.ToTable("Creatures", t =>
                        {
                            t.Property("ScientificName")
                                .HasColumnName("SapientSpecies_ScientificName");
                        });

                    b.HasDiscriminator().HasValue("SapientSpecies");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Geography.City", b =>
                {
                    b.HasBaseType("ChronicleKeeper.Core.Entities.Geography.Location");

                    b.Property<int?>("EconomicSystemId")
                        .HasColumnType("int");

                    b.Property<int?>("EducationSystemId")
                        .HasColumnType("int");

                    b.Property<int?>("FactionId")
                        .HasColumnType("int");

                    b.Property<int?>("GovernmentSystemId")
                        .HasColumnType("int");

                    b.Property<bool>("IsCapital")
                        .HasColumnType("bit");

                    b.Property<int>("LegalSystemId")
                        .HasColumnType("int");

                    b.HasIndex("EconomicSystemId");

                    b.HasIndex("EducationSystemId");

                    b.HasIndex("FactionId");

                    b.HasIndex("GovernmentSystemId");

                    b.HasIndex("LegalSystemId");

                    b.ToTable("Locations", t =>
                        {
                            t.Property("EconomicSystemId")
                                .HasColumnName("City_EconomicSystemId");

                            t.Property("EducationSystemId")
                                .HasColumnName("City_EducationSystemId");

                            t.Property("GovernmentSystemId")
                                .HasColumnName("City_GovernmentSystemId");

                            t.Property("LegalSystemId")
                                .HasColumnName("City_LegalSystemId");
                        });

                    b.HasDiscriminator().HasValue("City");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Geography.Continent", b =>
                {
                    b.HasBaseType("ChronicleKeeper.Core.Entities.Geography.Location");

                    b.Property<string>("ContinentSpecifics")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Continent");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Geography.Country", b =>
                {
                    b.HasBaseType("ChronicleKeeper.Core.Entities.Geography.Location");

                    b.Property<int?>("CapitalCityId")
                        .HasColumnType("int");

                    b.Property<int?>("EconomicSystemId")
                        .HasColumnType("int");

                    b.Property<int?>("EducationSystemId")
                        .HasColumnType("int");

                    b.Property<int?>("GovernmentSystemId")
                        .HasColumnType("int");

                    b.Property<int?>("LegalSystemId")
                        .HasColumnType("int");

                    b.Property<int>("PrimaryNationId")
                        .HasColumnType("int");

                    b.HasIndex("EconomicSystemId");

                    b.HasIndex("EducationSystemId");

                    b.HasIndex("GovernmentSystemId");

                    b.HasIndex("LegalSystemId");

                    b.HasDiscriminator().HasValue("Country");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Geography.District", b =>
                {
                    b.HasBaseType("ChronicleKeeper.Core.Entities.Geography.Location");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("DistrictType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("CityId");

                    b.HasDiscriminator().HasValue("District");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Geography.Ecosystems.Ecosystem", b =>
                {
                    b.HasBaseType("ChronicleKeeper.Core.Entities.Geography.Location");

                    b.Property<string>("UniqueFeatures")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Ecosystem");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Geography.Landmark", b =>
                {
                    b.HasBaseType("ChronicleKeeper.Core.Entities.Geography.Location");

                    b.Property<string>("LandmarkType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Landmark");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Geography.Region", b =>
                {
                    b.HasBaseType("ChronicleKeeper.Core.Entities.Geography.Location");

                    b.Property<string>("RegionSpecifics")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Region");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Professions.TradeSchool", b =>
                {
                    b.HasBaseType("ChronicleKeeper.Core.Entities.Social.Education.School");

                    b.Property<int>("DurationYears")
                        .HasColumnType("int");

                    b.Property<bool>("IsGovernmentRecognized")
                        .HasColumnType("bit");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("TradeSchool");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Geography.Creatures.Plants.Crop", b =>
                {
                    b.HasBaseType("ChronicleKeeper.Core.Entities.Geography.Creatures.Plants.Plant");

                    b.Property<int>("CropType")
                        .HasColumnType("int");

                    b.Property<bool>("IsDomesticated")
                        .HasColumnType("bit");

                    b.Property<double>("YieldPerHectare")
                        .HasColumnType("float");

                    b.ToTable("Creatures", t =>
                        {
                            t.Property("AnimalId")
                                .HasColumnName("Plant_AnimalId");

                            t.Property("IsBioluminescent")
                                .HasColumnName("Plant_IsBioluminescent");

                            t.Property("IsMedicinal")
                                .HasColumnName("Plant_IsMedicinal");

                            t.Property("IsPoisonous")
                                .HasColumnName("Plant_IsPoisonous");

                            t.Property("IsSymbiotic")
                                .HasColumnName("Plant_IsSymbiotic");

                            t.Property("MythologicalSignificance")
                                .HasColumnName("Plant_MythologicalSignificance");

                            t.Property("ScientificName")
                                .HasColumnName("Plant_ScientificName");

                            t.Property("SpecialProperties")
                                .HasColumnName("Plant_SpecialProperties");

                            t.Property("IsDomesticated")
                                .HasColumnName("Crop_IsDomesticated");
                        });

                    b.HasDiscriminator().HasValue("Crop");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Geography.Creatures.Plants.Tree", b =>
                {
                    b.HasBaseType("ChronicleKeeper.Core.Entities.Geography.Creatures.Plants.Plant");

                    b.Property<int>("LeafType")
                        .HasColumnType("int");

                    b.Property<int>("Lifespan")
                        .HasColumnType("int");

                    b.Property<double>("MaxHeight")
                        .HasColumnType("float");

                    b.ToTable("Creatures", t =>
                        {
                            t.Property("AnimalId")
                                .HasColumnName("Plant_AnimalId");

                            t.Property("IsBioluminescent")
                                .HasColumnName("Plant_IsBioluminescent");

                            t.Property("IsMedicinal")
                                .HasColumnName("Plant_IsMedicinal");

                            t.Property("IsPoisonous")
                                .HasColumnName("Plant_IsPoisonous");

                            t.Property("IsSymbiotic")
                                .HasColumnName("Plant_IsSymbiotic");

                            t.Property("MythologicalSignificance")
                                .HasColumnName("Plant_MythologicalSignificance");

                            t.Property("ScientificName")
                                .HasColumnName("Plant_ScientificName");

                            t.Property("SpecialProperties")
                                .HasColumnName("Plant_SpecialProperties");
                        });

                    b.HasDiscriminator().HasValue("Tree");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Geography.Creatures.Sapient.Deity", b =>
                {
                    b.HasBaseType("ChronicleKeeper.Core.Entities.Geography.Creatures.Sapient.SapientSpecies");

                    b.Property<bool>("CanManifestPhysically")
                        .HasColumnType("bit");

                    b.Property<int>("DeityType")
                        .HasColumnType("int");

                    b.Property<string>("Domain")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("GrantsPowers")
                        .HasColumnType("bit");

                    b.Property<bool>("IsImmortal")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMonotheistic")
                        .HasColumnType("bit");

                    b.Property<int?>("ReligionId")
                        .HasColumnType("int");

                    b.Property<string>("WorshipMethods")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("ReligionId");

                    b.ToTable("Creatures", t =>
                        {
                            t.Property("ScientificName")
                                .HasColumnName("SapientSpecies_ScientificName");
                        });

                    b.HasDiscriminator().HasValue("Deity");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Geography.Ecosystems.CaveEcosystem", b =>
                {
                    b.HasBaseType("ChronicleKeeper.Core.Entities.Geography.Ecosystems.Ecosystem");

                    b.Property<double>("Depth")
                        .HasColumnType("float");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.ToTable("Locations", t =>
                        {
                            t.Property("Type")
                                .HasColumnName("CaveEcosystem_Type");
                        });

                    b.HasDiscriminator().HasValue("CaveEcosystem");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Geography.Ecosystems.DesertEcosystem", b =>
                {
                    b.HasBaseType("ChronicleKeeper.Core.Entities.Geography.Ecosystems.Ecosystem");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("DesertEcosystem");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Geography.Ecosystems.ForestEcosystem", b =>
                {
                    b.HasBaseType("ChronicleKeeper.Core.Entities.Geography.Ecosystems.Ecosystem");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.ToTable("Locations", t =>
                        {
                            t.Property("Type")
                                .HasColumnName("ForestEcosystem_Type");
                        });

                    b.HasDiscriminator().HasValue("ForestEcosystem");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Geography.Ecosystems.GrasslandEcosystem", b =>
                {
                    b.HasBaseType("ChronicleKeeper.Core.Entities.Geography.Ecosystems.Ecosystem");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.ToTable("Locations", t =>
                        {
                            t.Property("Type")
                                .HasColumnName("GrasslandEcosystem_Type");
                        });

                    b.HasDiscriminator().HasValue("GrasslandEcosystem");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Geography.Ecosystems.MountainEcosystem", b =>
                {
                    b.HasBaseType("ChronicleKeeper.Core.Entities.Geography.Ecosystems.Ecosystem");

                    b.Property<double>("MaxElevation")
                        .HasColumnType("float");

                    b.Property<double>("Prominence")
                        .HasColumnType("float");

                    b.HasDiscriminator().HasValue("MountainEcosystem");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Geography.Ecosystems.MountainRange", b =>
                {
                    b.HasBaseType("ChronicleKeeper.Core.Entities.Geography.Ecosystems.Ecosystem");

                    b.Property<double>("Length")
                        .HasColumnType("float");

                    b.HasDiscriminator().HasValue("MountainRange");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Geography.Ecosystems.SwampEcosystem", b =>
                {
                    b.HasBaseType("ChronicleKeeper.Core.Entities.Geography.Ecosystems.Ecosystem");

                    b.Property<bool>("IsSaltwater")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue("SwampEcosystem");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Geography.Ecosystems.WaterEcosystem", b =>
                {
                    b.HasBaseType("ChronicleKeeper.Core.Entities.Geography.Ecosystems.Ecosystem");

                    b.Property<double>("Depth")
                        .HasColumnType("float");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.ToTable("Locations", t =>
                        {
                            t.Property("Depth")
                                .HasColumnName("WaterEcosystem_Depth");

                            t.Property("Type")
                                .HasColumnName("WaterEcosystem_Type");
                        });

                    b.HasDiscriminator().HasValue("WaterEcosystem");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Geography.Ecosystems.LakeEcosystem", b =>
                {
                    b.HasBaseType("ChronicleKeeper.Core.Entities.Geography.Ecosystems.WaterEcosystem");

                    b.Property<bool>("IsFreshwater")
                        .HasColumnType("bit");

                    b.Property<double>("MaxDepth")
                        .HasColumnType("float");

                    b.Property<double>("Volume")
                        .HasColumnType("float");

                    b.ToTable("Locations", t =>
                        {
                            t.Property("Depth")
                                .HasColumnName("WaterEcosystem_Depth");

                            t.Property("Type")
                                .HasColumnName("WaterEcosystem_Type");
                        });

                    b.HasDiscriminator().HasValue("LakeEcosystem");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Geography.Ecosystems.OceanEcosystem", b =>
                {
                    b.HasBaseType("ChronicleKeeper.Core.Entities.Geography.Ecosystems.WaterEcosystem");

                    b.ToTable("Locations", t =>
                        {
                            t.Property("Depth")
                                .HasColumnName("WaterEcosystem_Depth");

                            t.Property("Type")
                                .HasColumnName("WaterEcosystem_Type");
                        });

                    b.HasDiscriminator().HasValue("OceanEcosystem");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Geography.Ecosystems.RiverEcosystem", b =>
                {
                    b.HasBaseType("ChronicleKeeper.Core.Entities.Geography.Ecosystems.WaterEcosystem");

                    b.Property<double>("Length")
                        .HasColumnType("float");

                    b.ToTable("Locations", t =>
                        {
                            t.Property("Depth")
                                .HasColumnName("WaterEcosystem_Depth");

                            t.Property("Type")
                                .HasColumnName("WaterEcosystem_Type");

                            t.Property("Length")
                                .HasColumnName("RiverEcosystem_Length");
                        });

                    b.HasDiscriminator().HasValue("RiverEcosystem");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Geography.Ecosystems.SeaEcosystem", b =>
                {
                    b.HasBaseType("ChronicleKeeper.Core.Entities.Geography.Ecosystems.WaterEcosystem");

                    b.ToTable("Locations", t =>
                        {
                            t.Property("Depth")
                                .HasColumnName("WaterEcosystem_Depth");

                            t.Property("Type")
                                .HasColumnName("WaterEcosystem_Type");
                        });

                    b.HasDiscriminator().HasValue("SeaEcosystem");
                });

            modelBuilder.Entity("AbilityCharacter", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.Characters.Abilities.Ability", null)
                        .WithMany()
                        .HasForeignKey("AbilitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChronicleKeeper.Core.Entities.Characters.Character", null)
                        .WithMany()
                        .HasForeignKey("CharactersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ArmyBattle", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Military.Battle", null)
                        .WithMany()
                        .HasForeignKey("BattlesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Military.Army", null)
                        .WithMany()
                        .HasForeignKey("ParticipatingArmiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CharacterClothing", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.Characters.Character", null)
                        .WithMany()
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Cultures.Clothing", null)
                        .WithMany()
                        .HasForeignKey("ClothingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CharacterFaction", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Faction", null)
                        .WithMany()
                        .HasForeignKey("FactionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChronicleKeeper.Core.Entities.Characters.Character", null)
                        .WithMany()
                        .HasForeignKey("MembersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CharacterHobby", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.Characters.CharacterInfo.Hobby", null)
                        .WithMany()
                        .HasForeignKey("HobbiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChronicleKeeper.Core.Entities.Characters.Character", null)
                        .WithMany()
                        .HasForeignKey("PractitionersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CharacterSpecialisation", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.Characters.Character", null)
                        .WithMany()
                        .HasForeignKey("ExpertsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChronicleKeeper.Core.Entities.Professions.Specialisation", null)
                        .WithMany()
                        .HasForeignKey("SpecialisationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Characters.Abilities.Ability", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.HistoryTimelines.History", "History")
                        .WithMany()
                        .HasForeignKey("HistoryId");

                    b.Navigation("History");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Characters.Abilities.AbilityLevel", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.Characters.Abilities.Ability", "Ability")
                        .WithOne("AbilityLevel")
                        .HasForeignKey("ChronicleKeeper.Core.Entities.Characters.Abilities.AbilityLevel", "AbilityId");

                    b.HasOne("ChronicleKeeper.Core.Entities.HistoryTimelines.History", "History")
                        .WithMany()
                        .HasForeignKey("HistoryId");

                    b.Navigation("Ability");

                    b.Navigation("History");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Characters.Character", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.Characters.Character", null)
                        .WithMany("Siblings")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Cultures.CulturalInstitution", null)
                        .WithMany("NotableArtists")
                        .HasForeignKey("CulturalInstitutionId");

                    b.HasOne("ChronicleKeeper.Core.Entities.Characters.Character", "Father")
                        .WithMany()
                        .HasForeignKey("FatherId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ChronicleKeeper.Core.Entities.HistoryTimelines.History", "History")
                        .WithMany()
                        .HasForeignKey("HistoryId");

                    b.HasOne("ChronicleKeeper.Core.Entities.Characters.Character", "Mother")
                        .WithMany()
                        .HasForeignKey("MotherId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Nationality.Nation", "Nation")
                        .WithMany("Characters")
                        .HasForeignKey("NationId");

                    b.HasOne("ChronicleKeeper.Core.Entities.Professions.Profession", "Profession")
                        .WithMany("Character")
                        .HasForeignKey("ProfessionId");

                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Religions.Religion", "Religion")
                        .WithMany()
                        .HasForeignKey("ReligionId");

                    b.HasOne("ChronicleKeeper.Core.Entities.Geography.Creatures.Sapient.SapientSpecies", "SapientSpecies")
                        .WithMany("Characters")
                        .HasForeignKey("SapientSpeciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Structure.SocialClass", "SocialClass")
                        .WithMany("Members")
                        .HasForeignKey("SocialClassId");

                    b.HasOne("ChronicleKeeper.Core.Entities.HistoryTimelines.TimelineEvent", null)
                        .WithMany("InvolvedCharacters")
                        .HasForeignKey("TimelineEventId");

                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Education.UniversityMajor", null)
                        .WithMany("Professors")
                        .HasForeignKey("UniversityMajorId");

                    b.OwnsOne("ChronicleKeeper.Core.Entities.Characters.CharacterInfo.BackgroundInfo", "Background", b1 =>
                        {
                            b1.Property<int>("CharacterId")
                                .HasColumnType("int");

                            b1.Property<string>("Childhood")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("FamilyStatus")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<bool>("IsImmigrant")
                                .HasColumnType("bit");

                            b1.Property<string>("MigrationHistory")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Upbringing")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("CharacterId");

                            b1.ToTable("Characters");

                            b1.WithOwner()
                                .HasForeignKey("CharacterId");
                        });

                    b.OwnsOne("ChronicleKeeper.Core.Entities.Characters.CharacterInfo.PersonalityInfo", "Personality", b1 =>
                        {
                            b1.Property<int>("CharacterId")
                                .HasColumnType("int");

                            b1.Property<string>("Ambitions")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Fears")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Flaws")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Motivations")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("PersonalityTraits")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("PsychologicalProfile")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Virtues")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("CharacterId");

                            b1.ToTable("Characters");

                            b1.WithOwner()
                                .HasForeignKey("CharacterId");
                        });

                    b.Navigation("Background")
                        .IsRequired();

                    b.Navigation("Father");

                    b.Navigation("History");

                    b.Navigation("Mother");

                    b.Navigation("Nation");

                    b.Navigation("Personality")
                        .IsRequired();

                    b.Navigation("Profession");

                    b.Navigation("Religion");

                    b.Navigation("SapientSpecies");

                    b.Navigation("SocialClass");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Characters.CharacterInfo.CharacterRelationship", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.HistoryTimelines.History", "History")
                        .WithMany()
                        .HasForeignKey("HistoryId");

                    b.Navigation("History");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Characters.CharacterInfo.Hobby", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.HistoryTimelines.History", "History")
                        .WithMany()
                        .HasForeignKey("HistoryId");

                    b.Navigation("History");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Characters.Equipment.Item", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.Characters.Character", "CurrentOwner")
                        .WithMany("Equipments")
                        .HasForeignKey("CurrentOwnerId");

                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Faction", "Faction")
                        .WithMany("NotableItemsInPossesion")
                        .HasForeignKey("FactionId");

                    b.HasOne("ChronicleKeeper.Core.Entities.HistoryTimelines.History", "History")
                        .WithMany()
                        .HasForeignKey("HistoryId");

                    b.HasOne("ChronicleKeeper.Core.Entities.Geography.Location", "StoredAt")
                        .WithMany("Items")
                        .HasForeignKey("StoredAtId");

                    b.Navigation("CurrentOwner");

                    b.Navigation("Faction");

                    b.Navigation("History");

                    b.Navigation("StoredAt");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Characters.Equipment.OwnershipHistory", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.HistoryTimelines.History", "History")
                        .WithMany()
                        .HasForeignKey("HistoryId");

                    b.Navigation("History");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Content.Book.Chapter", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.Content.Book.Book", "Book")
                        .WithMany("Chapters")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Content.Movie.Episode", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.Content.Movie.Series", "Series")
                        .WithMany("Episodes")
                        .HasForeignKey("SeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Series");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Content.Reference", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.Content.Book.Chapter", null)
                        .WithMany("References")
                        .HasForeignKey("ChapterId");

                    b.HasOne("ChronicleKeeper.Core.Entities.Content.Content", null)
                        .WithMany("References")
                        .HasForeignKey("ContentId");

                    b.HasOne("ChronicleKeeper.Core.Entities.Content.Movie.Episode", null)
                        .WithMany("References")
                        .HasForeignKey("EpisodeId");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Geography.Climate.ClimateDetail", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.HistoryTimelines.History", "History")
                        .WithMany()
                        .HasForeignKey("HistoryId");

                    b.Navigation("History");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Geography.Climate.ClimateZone", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.HistoryTimelines.History", "History")
                        .WithMany()
                        .HasForeignKey("HistoryId");

                    b.Navigation("History");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Geography.Climate.Season", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.HistoryTimelines.History", "History")
                        .WithMany()
                        .HasForeignKey("HistoryId");

                    b.Navigation("History");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Geography.Climate.WeatherPattern", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.Geography.Climate.ClimateZone", "ClimateZone")
                        .WithMany("TypicalWeatherPatterns")
                        .HasForeignKey("ClimateZoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChronicleKeeper.Core.Entities.HistoryTimelines.History", "History")
                        .WithMany()
                        .HasForeignKey("HistoryId");

                    b.Navigation("ClimateZone");

                    b.Navigation("History");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Geography.Creatures.Creature", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.Geography.Creatures.Fungi.Fungus", null)
                        .WithMany("Hosts")
                        .HasForeignKey("FungusId");

                    b.HasOne("ChronicleKeeper.Core.Entities.HistoryTimelines.History", "History")
                        .WithMany()
                        .HasForeignKey("HistoryId");

                    b.HasOne("ChronicleKeeper.Core.Entities.Geography.Creatures.Plants.Plant", null)
                        .WithMany("Hosts")
                        .HasForeignKey("PlantId");

                    b.Navigation("History");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Geography.Creatures.Sapient.Race", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.HistoryTimelines.History", "History")
                        .WithMany()
                        .HasForeignKey("HistoryId");

                    b.HasOne("ChronicleKeeper.Core.Entities.Geography.Creatures.Sapient.SapientSpecies", "SapientSpecies")
                        .WithMany("Races")
                        .HasForeignKey("SapientSpeciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("History");

                    b.Navigation("SapientSpecies");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Geography.Location", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Cultures.ArchitectureStyle", null)
                        .WithMany("TypicalLocations")
                        .HasForeignKey("ArchitectureStyleId");

                    b.HasOne("ChronicleKeeper.Core.Entities.HistoryTimelines.History", "History")
                        .WithMany()
                        .HasForeignKey("HistoryId");

                    b.HasOne("ChronicleKeeper.Core.Entities.Geography.Location", "ParentLocation")
                        .WithMany("SubLocations")
                        .HasForeignKey("ParentLocationId");

                    b.Navigation("History");

                    b.Navigation("ParentLocation");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.HistoryTimelines.Timeline", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.HistoryTimelines.History", "History")
                        .WithMany("Timelines")
                        .HasForeignKey("HistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("History");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.HistoryTimelines.TimelineEvent", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Military.Battle", "Battle")
                        .WithMany()
                        .HasForeignKey("BattleId");

                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Cultures.Folklore", "Folklore")
                        .WithMany("RelatedEvents")
                        .HasForeignKey("FolkloreId");

                    b.HasOne("ChronicleKeeper.Core.Entities.Geography.Location", "Location")
                        .WithMany("TimelineEvents")
                        .HasForeignKey("LocationId");

                    b.HasOne("ChronicleKeeper.Core.Entities.HistoryTimelines.Timeline", "Timeline")
                        .WithMany("Events")
                        .HasForeignKey("TimelineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Battle");

                    b.Navigation("Folklore");

                    b.Navigation("Location");

                    b.Navigation("Timeline");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Miscellaneous.Mutation", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.HistoryTimelines.History", "History")
                        .WithMany()
                        .HasForeignKey("HistoryId");

                    b.HasOne("ChronicleKeeper.Core.Entities.Geography.Creatures.Creature", "MutantCreature")
                        .WithMany("Mutations")
                        .HasForeignKey("MutantCreatureId");

                    b.Navigation("History");

                    b.Navigation("MutantCreature");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Professions.Apprenticeship", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Economy.Corporation", "Corporation")
                        .WithMany("Apprenticeships")
                        .HasForeignKey("CorporationId");

                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Economy.Guild", "Guild")
                        .WithMany("Apprenticeships")
                        .HasForeignKey("GuildId");

                    b.HasOne("ChronicleKeeper.Core.Entities.HistoryTimelines.History", "History")
                        .WithMany()
                        .HasForeignKey("HistoryId");

                    b.HasOne("ChronicleKeeper.Core.Entities.Professions.Profession", "Profession")
                        .WithMany("Apprenticeships")
                        .HasForeignKey("ProfessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChronicleKeeper.Core.Entities.Professions.TradeSchool", "TradeSchool")
                        .WithMany("Apprenticeships")
                        .HasForeignKey("TradeSchoolId");

                    b.Navigation("Corporation");

                    b.Navigation("Guild");

                    b.Navigation("History");

                    b.Navigation("Profession");

                    b.Navigation("TradeSchool");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Professions.JobRank", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.HistoryTimelines.History", "History")
                        .WithMany()
                        .HasForeignKey("HistoryId");

                    b.HasOne("ChronicleKeeper.Core.Entities.Professions.Profession", "Profession")
                        .WithMany("JobRanks")
                        .HasForeignKey("ProfessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("History");

                    b.Navigation("Profession");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Professions.Profession", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.HistoryTimelines.History", "History")
                        .WithMany()
                        .HasForeignKey("HistoryId");

                    b.Navigation("History");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Professions.Specialisation", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.HistoryTimelines.History", "History")
                        .WithMany()
                        .HasForeignKey("HistoryId");

                    b.HasOne("ChronicleKeeper.Core.Entities.Professions.Profession", "Profession")
                        .WithMany("Specialisations")
                        .HasForeignKey("ProfessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("History");

                    b.Navigation("Profession");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Cultures.ArchitectureStyle", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Cultures.Culture", "Culture")
                        .WithMany("ArchitectureStyles")
                        .HasForeignKey("CultureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChronicleKeeper.Core.Entities.HistoryTimelines.History", "History")
                        .WithMany()
                        .HasForeignKey("HistoryId");

                    b.Navigation("Culture");

                    b.Navigation("History");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Cultures.ArtForm", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Cultures.Culture", "Culture")
                        .WithMany("ArtForms")
                        .HasForeignKey("CultureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChronicleKeeper.Core.Entities.HistoryTimelines.History", "History")
                        .WithMany()
                        .HasForeignKey("HistoryId");

                    b.Navigation("Culture");

                    b.Navigation("History");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Cultures.Clothing", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Cultures.Culture", "Culture")
                        .WithMany("Clothing")
                        .HasForeignKey("CultureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChronicleKeeper.Core.Entities.HistoryTimelines.History", "History")
                        .WithMany()
                        .HasForeignKey("HistoryId");

                    b.Navigation("Culture");

                    b.Navigation("History");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Cultures.Cuisine", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Cultures.Culture", "Culture")
                        .WithMany("Cuisines")
                        .HasForeignKey("CultureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChronicleKeeper.Core.Entities.HistoryTimelines.History", "History")
                        .WithMany()
                        .HasForeignKey("HistoryId");

                    b.Navigation("Culture");

                    b.Navigation("History");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Cultures.CulturalFestival", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Cultures.Culture", "Culture")
                        .WithMany()
                        .HasForeignKey("CultureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChronicleKeeper.Core.Entities.HistoryTimelines.History", "History")
                        .WithMany()
                        .HasForeignKey("HistoryId");

                    b.HasOne("ChronicleKeeper.Core.Entities.Geography.Location", "Location")
                        .WithMany("Festivals")
                        .HasForeignKey("LocationId");

                    b.Navigation("Culture");

                    b.Navigation("History");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Cultures.CulturalInstitution", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.Geography.City", "City")
                        .WithMany("CulturalInstitutions")
                        .HasForeignKey("CityId");

                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Cultures.Culture", "Culture")
                        .WithMany("CulturalInstitutions")
                        .HasForeignKey("CultureId");

                    b.HasOne("ChronicleKeeper.Core.Entities.HistoryTimelines.History", "History")
                        .WithMany()
                        .HasForeignKey("HistoryId");

                    b.Navigation("City");

                    b.Navigation("Culture");

                    b.Navigation("History");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Cultures.Culture", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.HistoryTimelines.History", "History")
                        .WithMany()
                        .HasForeignKey("HistoryId");

                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Cultures.Language", "Language")
                        .WithMany("Cultures")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Religions.Religion", "Religion")
                        .WithMany("Cultures")
                        .HasForeignKey("ReligionId");

                    b.Navigation("History");

                    b.Navigation("Language");

                    b.Navigation("Religion");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Cultures.Custom", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Cultures.Culture", "Culture")
                        .WithMany("Customs")
                        .HasForeignKey("CultureId");

                    b.HasOne("ChronicleKeeper.Core.Entities.HistoryTimelines.History", "History")
                        .WithMany()
                        .HasForeignKey("HistoryId");

                    b.Navigation("Culture");

                    b.Navigation("History");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Cultures.Folklore", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Cultures.Culture", "Culture")
                        .WithMany("Folktales")
                        .HasForeignKey("CultureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChronicleKeeper.Core.Entities.HistoryTimelines.History", "History")
                        .WithMany()
                        .HasForeignKey("HistoryId");

                    b.Navigation("Culture");

                    b.Navigation("History");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Cultures.Language", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.HistoryTimelines.History", "History")
                        .WithMany()
                        .HasForeignKey("HistoryId");

                    b.Navigation("History");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Cultures.Myth", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Cultures.Culture", "Culture")
                        .WithMany("Myths")
                        .HasForeignKey("CultureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChronicleKeeper.Core.Entities.Geography.Creatures.Sapient.Deity", "Deity")
                        .WithMany("MajorMyths")
                        .HasForeignKey("DeityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChronicleKeeper.Core.Entities.HistoryTimelines.History", "History")
                        .WithMany()
                        .HasForeignKey("HistoryId");

                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Religions.Religion", "Religion")
                        .WithMany("Myths")
                        .HasForeignKey("ReligionId");

                    b.Navigation("Culture");

                    b.Navigation("Deity");

                    b.Navigation("History");

                    b.Navigation("Religion");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Cultures.Tradition", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Cultures.Culture", "Culture")
                        .WithMany("Traditions")
                        .HasForeignKey("CultureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChronicleKeeper.Core.Entities.HistoryTimelines.History", "History")
                        .WithMany()
                        .HasForeignKey("HistoryId");

                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Religions.Religion", "Religion")
                        .WithMany("Traditions")
                        .HasForeignKey("ReligionId");

                    b.Navigation("Culture");

                    b.Navigation("History");

                    b.Navigation("Religion");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Economy.BankingSystem", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Economy.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChronicleKeeper.Core.Entities.HistoryTimelines.History", "History")
                        .WithMany()
                        .HasForeignKey("HistoryId");

                    b.Navigation("Currency");

                    b.Navigation("History");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Economy.CorporateLeadership", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Economy.Corporation", "Corporation")
                        .WithMany("Leadership")
                        .HasForeignKey("CorporationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChronicleKeeper.Core.Entities.HistoryTimelines.History", "History")
                        .WithMany()
                        .HasForeignKey("HistoryId");

                    b.HasOne("ChronicleKeeper.Core.Entities.Professions.Profession", "Profession")
                        .WithMany("CorporateLeaderships")
                        .HasForeignKey("ProfessionId");

                    b.Navigation("Corporation");

                    b.Navigation("History");

                    b.Navigation("Profession");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Economy.Corporation", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Economy.BankingSystem", "BankingSystem")
                        .WithMany("FinancialInstitutions")
                        .HasForeignKey("BankingSystemId");

                    b.HasOne("ChronicleKeeper.Core.Entities.HistoryTimelines.History", "History")
                        .WithMany()
                        .HasForeignKey("HistoryId");

                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Economy.Industry", "Industry")
                        .WithMany()
                        .HasForeignKey("IndustryId");

                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Economy.TaxationSystem", "TaxationSystem")
                        .WithMany("TaxedCorporations")
                        .HasForeignKey("TaxationSystemId");

                    b.Navigation("BankingSystem");

                    b.Navigation("History");

                    b.Navigation("Industry");

                    b.Navigation("TaxationSystem");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Economy.Currency", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.HistoryTimelines.History", "History")
                        .WithMany()
                        .HasForeignKey("HistoryId");

                    b.Navigation("History");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Economy.EconomicSystem", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Economy.BankingSystem", "BankingSystem")
                        .WithMany("UsedInEconomicSystems")
                        .HasForeignKey("BankingSystemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChronicleKeeper.Core.Entities.HistoryTimelines.History", "History")
                        .WithMany()
                        .HasForeignKey("HistoryId");

                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Economy.TaxationSystem", "TaxationSystem")
                        .WithMany("UsedInEconomicSystems")
                        .HasForeignKey("TaxationSystemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BankingSystem");

                    b.Navigation("History");

                    b.Navigation("TaxationSystem");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Economy.ExtractionMethod", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.HistoryTimelines.History", "History")
                        .WithMany()
                        .HasForeignKey("HistoryId");

                    b.Navigation("History");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Economy.Guild", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Education.EducationSystem", "EducationSystem")
                        .WithMany("GuildsProvidingEducation")
                        .HasForeignKey("EducationSystemId");

                    b.HasOne("ChronicleKeeper.Core.Entities.HistoryTimelines.History", "History")
                        .WithMany()
                        .HasForeignKey("HistoryId");

                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Economy.Industry", "Industry")
                        .WithMany()
                        .HasForeignKey("IndustryId");

                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Politics.LegalSystem", "LegalSystem")
                        .WithMany("Guilds")
                        .HasForeignKey("LegalSystemId");

                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Economy.TaxationSystem", "TaxationSystem")
                        .WithMany("TaxedGuilds")
                        .HasForeignKey("TaxationSystemId");

                    b.Navigation("EducationSystem");

                    b.Navigation("History");

                    b.Navigation("Industry");

                    b.Navigation("LegalSystem");

                    b.Navigation("TaxationSystem");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Economy.GuildRank", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Economy.Guild", "Guild")
                        .WithMany("GuildRanks")
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChronicleKeeper.Core.Entities.HistoryTimelines.History", "History")
                        .WithMany()
                        .HasForeignKey("HistoryId");

                    b.Navigation("Guild");

                    b.Navigation("History");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Economy.Industry", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.Geography.City", null)
                        .WithMany("MajorIndustries")
                        .HasForeignKey("CityId");

                    b.HasOne("ChronicleKeeper.Core.Entities.Geography.Country", null)
                        .WithMany("MajorIndustries")
                        .HasForeignKey("CountryId");

                    b.HasOne("ChronicleKeeper.Core.Entities.HistoryTimelines.History", "History")
                        .WithMany()
                        .HasForeignKey("HistoryId");

                    b.Navigation("History");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Economy.NaturalResource", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Economy.ExtractionMethod", "ExtractionMethod")
                        .WithMany("ResourcesExtracted")
                        .HasForeignKey("ExtractionMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChronicleKeeper.Core.Entities.HistoryTimelines.History", "History")
                        .WithMany()
                        .HasForeignKey("HistoryId");

                    b.Navigation("ExtractionMethod");

                    b.Navigation("History");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Economy.TaxationSystem", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.HistoryTimelines.History", "History")
                        .WithMany()
                        .HasForeignKey("HistoryId");

                    b.Navigation("History");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Economy.TradeRoute", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.HistoryTimelines.History", "History")
                        .WithMany()
                        .HasForeignKey("HistoryId");

                    b.Navigation("History");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Education.EducationRecord", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.Characters.Character", "Character")
                        .WithMany("Educations")
                        .HasForeignKey("CharacterId");

                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Economy.Guild", "Guild")
                        .WithMany("Alumni")
                        .HasForeignKey("GuildId");

                    b.HasOne("ChronicleKeeper.Core.Entities.HistoryTimelines.History", "History")
                        .WithMany()
                        .HasForeignKey("HistoryId");

                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Education.School", "School")
                        .WithMany("Alumni")
                        .HasForeignKey("SchoolId");

                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Education.University", "University")
                        .WithMany("Alumni")
                        .HasForeignKey("UniversityId");

                    b.Navigation("Character");

                    b.Navigation("Guild");

                    b.Navigation("History");

                    b.Navigation("School");

                    b.Navigation("University");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Education.EducationSystem", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.HistoryTimelines.History", "History")
                        .WithMany()
                        .HasForeignKey("HistoryId");

                    b.Navigation("History");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Education.Library", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.HistoryTimelines.History", "History")
                        .WithMany()
                        .HasForeignKey("HistoryId");

                    b.HasOne("ChronicleKeeper.Core.Entities.Geography.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Education.University", "University")
                        .WithMany()
                        .HasForeignKey("UniversityId");

                    b.Navigation("History");

                    b.Navigation("Location");

                    b.Navigation("University");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Education.ReligiousEducation", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.HistoryTimelines.History", "History")
                        .WithMany()
                        .HasForeignKey("HistoryId");

                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Religions.Religion", "Religion")
                        .WithMany()
                        .HasForeignKey("ReligionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Religions.ReligiousOrder", "ReligiousOrder")
                        .WithMany("ClergyTraining")
                        .HasForeignKey("ReligiousOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("History");

                    b.Navigation("Religion");

                    b.Navigation("ReligiousOrder");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Education.School", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Education.EducationSystem", "EducationSystem")
                        .WithMany("Schools")
                        .HasForeignKey("EducationSystemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChronicleKeeper.Core.Entities.HistoryTimelines.History", "History")
                        .WithMany()
                        .HasForeignKey("HistoryId");

                    b.Navigation("EducationSystem");

                    b.Navigation("History");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Education.SchoolSubject", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.HistoryTimelines.History", "History")
                        .WithMany()
                        .HasForeignKey("HistoryId");

                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Education.School", "School")
                        .WithMany("Subjects")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("History");

                    b.Navigation("School");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Education.University", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Education.EducationSystem", "EducationSystem")
                        .WithMany("Universities")
                        .HasForeignKey("EducationSystemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChronicleKeeper.Core.Entities.HistoryTimelines.History", "History")
                        .WithMany()
                        .HasForeignKey("HistoryId");

                    b.Navigation("EducationSystem");

                    b.Navigation("History");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Education.UniversityMajor", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.HistoryTimelines.History", "History")
                        .WithMany()
                        .HasForeignKey("HistoryId");

                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Education.University", "University")
                        .WithMany()
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("History");

                    b.Navigation("University");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Faction", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.HistoryTimelines.History", "History")
                        .WithMany()
                        .HasForeignKey("HistoryId");

                    b.Navigation("History");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Military.Army", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.Geography.City", "City")
                        .WithOne("Army")
                        .HasForeignKey("ChronicleKeeper.Core.Entities.Social.Military.Army", "CityId");

                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Faction", "Faction")
                        .WithOne("Army")
                        .HasForeignKey("ChronicleKeeper.Core.Entities.Social.Military.Army", "FactionId");

                    b.HasOne("ChronicleKeeper.Core.Entities.HistoryTimelines.History", "History")
                        .WithMany()
                        .HasForeignKey("HistoryId");

                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Military.MilitaryOrganization", "MilitaryOrganization")
                        .WithMany("Armies")
                        .HasForeignKey("MilitaryOrganizationId");

                    b.Navigation("City");

                    b.Navigation("Faction");

                    b.Navigation("History");

                    b.Navigation("MilitaryOrganization");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Military.Battle", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.HistoryTimelines.History", "History")
                        .WithMany()
                        .HasForeignKey("HistoryId");

                    b.Navigation("History");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Military.MilitaryDoctrine", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.HistoryTimelines.History", "History")
                        .WithMany()
                        .HasForeignKey("HistoryId");

                    b.Navigation("History");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Military.MilitaryEquipment", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.HistoryTimelines.History", "History")
                        .WithMany()
                        .HasForeignKey("HistoryId");

                    b.Navigation("History");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Military.MilitaryOrganization", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.HistoryTimelines.History", "History")
                        .WithMany()
                        .HasForeignKey("HistoryId");

                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Military.MilitaryDoctrine", "MilitaryDoctrine")
                        .WithMany("MilitaryOrganizationsUsing")
                        .HasForeignKey("MilitaryDoctrineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("History");

                    b.Navigation("MilitaryDoctrine");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Military.MilitaryRank", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.HistoryTimelines.History", "History")
                        .WithMany()
                        .HasForeignKey("HistoryId");

                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Military.MilitaryUnit", "MilitaryUnit")
                        .WithMany("Ranks")
                        .HasForeignKey("MilitaryUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("History");

                    b.Navigation("MilitaryUnit");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Military.MilitaryUnit", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Military.Army", "BelongsToArmy")
                        .WithMany("Units")
                        .HasForeignKey("BelongsToArmyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChronicleKeeper.Core.Entities.HistoryTimelines.History", "History")
                        .WithMany()
                        .HasForeignKey("HistoryId");

                    b.Navigation("BelongsToArmy");

                    b.Navigation("History");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Nationality.Nation", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.HistoryTimelines.History", "History")
                        .WithMany()
                        .HasForeignKey("HistoryId");

                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Structure.SocialHierarchy", "SocialHierarchy")
                        .WithMany("Nations")
                        .HasForeignKey("SocialHierarchyId");

                    b.Navigation("History");

                    b.Navigation("SocialHierarchy");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Politics.GovernmentSystem", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.HistoryTimelines.History", "History")
                        .WithMany()
                        .HasForeignKey("HistoryId");

                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Politics.PoliticalIdeology", "PoliticalIdeology")
                        .WithMany("AffiliatedGovernmentSystems")
                        .HasForeignKey("PoliticalIdeologyId");

                    b.Navigation("History");

                    b.Navigation("PoliticalIdeology");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Politics.LegalSystem", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.HistoryTimelines.History", "History")
                        .WithMany()
                        .HasForeignKey("HistoryId");

                    b.Navigation("History");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Politics.PoliticalIdeology", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.HistoryTimelines.History", "History")
                        .WithMany()
                        .HasForeignKey("HistoryId");

                    b.Navigation("History");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Politics.PoliticalParty", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Politics.GovernmentSystem", null)
                        .WithMany("PoliticalParties")
                        .HasForeignKey("GovernmentSystemId");

                    b.HasOne("ChronicleKeeper.Core.Entities.HistoryTimelines.History", "History")
                        .WithMany()
                        .HasForeignKey("HistoryId");

                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Politics.PoliticalIdeology", "PoliticalIdeology")
                        .WithMany("AffiliatedPoliticalParties")
                        .HasForeignKey("PoliticalIdeologyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("History");

                    b.Navigation("PoliticalIdeology");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Politics.PrivilegeLaw", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.HistoryTimelines.History", "History")
                        .WithMany()
                        .HasForeignKey("HistoryId");

                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Structure.SocialClass", null)
                        .WithMany("PrivilegeLaws")
                        .HasForeignKey("SocialClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("History");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Religions.HolySite", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.Geography.Creatures.Sapient.Deity", "Deity")
                        .WithMany("SacredSitesOfDeity")
                        .HasForeignKey("DeityId");

                    b.HasOne("ChronicleKeeper.Core.Entities.HistoryTimelines.History", "History")
                        .WithMany()
                        .HasForeignKey("HistoryId");

                    b.HasOne("ChronicleKeeper.Core.Entities.Geography.Location", "Location")
                        .WithMany("HolySites")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Religions.Religion", "Religion")
                        .WithMany("HolySites")
                        .HasForeignKey("ReligionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Deity");

                    b.Navigation("History");

                    b.Navigation("Location");

                    b.Navigation("Religion");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Religions.Religion", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.HistoryTimelines.History", "History")
                        .WithMany()
                        .HasForeignKey("HistoryId");

                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Nationality.Nation", null)
                        .WithMany("StateReligions")
                        .HasForeignKey("NationId");

                    b.Navigation("History");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Religions.ReligiousFestival", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.HistoryTimelines.History", "History")
                        .WithMany()
                        .HasForeignKey("HistoryId");

                    b.Navigation("History");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Religions.ReligiousOrder", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.HistoryTimelines.History", "History")
                        .WithMany()
                        .HasForeignKey("HistoryId");

                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Religions.Religion", "Religion")
                        .WithMany("ReligiousOrders")
                        .HasForeignKey("ReligionId");

                    b.Navigation("History");

                    b.Navigation("Religion");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Religions.ReligiousText", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.Geography.Creatures.Sapient.Deity", "Deity")
                        .WithMany("SacredTexts")
                        .HasForeignKey("DeityId");

                    b.HasOne("ChronicleKeeper.Core.Entities.HistoryTimelines.History", "History")
                        .WithMany()
                        .HasForeignKey("HistoryId");

                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Religions.Religion", "Religion")
                        .WithMany("ReligiousTexts")
                        .HasForeignKey("ReligionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Deity");

                    b.Navigation("History");

                    b.Navigation("Religion");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Structure.SocialClass", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.HistoryTimelines.History", "History")
                        .WithMany()
                        .HasForeignKey("HistoryId");

                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Structure.SocialHierarchy", null)
                        .WithMany("Classes")
                        .HasForeignKey("SocialHierarchyId");

                    b.Navigation("History");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Structure.SocialHierarchy", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.HistoryTimelines.History", "History")
                        .WithMany()
                        .HasForeignKey("HistoryId");

                    b.Navigation("History");
                });

            modelBuilder.Entity("CityCorporation", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Economy.Corporation", null)
                        .WithMany()
                        .HasForeignKey("CorporationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChronicleKeeper.Core.Entities.Geography.City", null)
                        .WithMany()
                        .HasForeignKey("PresentInCitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CityCreature", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.Geography.City", null)
                        .WithMany()
                        .HasForeignKey("CitiesItInhabitsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChronicleKeeper.Core.Entities.Geography.Creatures.Creature", null)
                        .WithMany()
                        .HasForeignKey("CreatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CityCulture", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Cultures.Culture", null)
                        .WithMany()
                        .HasForeignKey("PredominantCulturesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChronicleKeeper.Core.Entities.Geography.City", null)
                        .WithMany()
                        .HasForeignKey("PredominantInCitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CityGuild", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Economy.Guild", null)
                        .WithMany()
                        .HasForeignKey("GuildsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChronicleKeeper.Core.Entities.Geography.City", null)
                        .WithMany()
                        .HasForeignKey("PresentInCitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CityNation", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.Geography.City", null)
                        .WithMany()
                        .HasForeignKey("CitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Nationality.Nation", null)
                        .WithMany()
                        .HasForeignKey("NationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CityPoliticalParty", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.Geography.City", null)
                        .WithMany()
                        .HasForeignKey("CitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Politics.PoliticalParty", null)
                        .WithMany()
                        .HasForeignKey("PoliticalPartiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CityReligion", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.Geography.City", null)
                        .WithMany()
                        .HasForeignKey("InCitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Religions.Religion", null)
                        .WithMany()
                        .HasForeignKey("ReligionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClimateDetailClimateZone", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.Geography.Climate.ClimateZone", null)
                        .WithMany()
                        .HasForeignKey("ClimateZoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChronicleKeeper.Core.Entities.Geography.Climate.ClimateDetail", null)
                        .WithMany()
                        .HasForeignKey("ClimatesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClimateZoneLocation", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.Geography.Climate.ClimateZone", null)
                        .WithMany()
                        .HasForeignKey("ClimateConditionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChronicleKeeper.Core.Entities.Geography.Location", null)
                        .WithMany()
                        .HasForeignKey("LocationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClimateZoneSeason", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.Geography.Climate.ClimateZone", null)
                        .WithMany()
                        .HasForeignKey("ClimateZoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChronicleKeeper.Core.Entities.Geography.Climate.Season", null)
                        .WithMany()
                        .HasForeignKey("SeasonsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CorporationCountry", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Economy.Corporation", null)
                        .WithMany()
                        .HasForeignKey("CorporationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChronicleKeeper.Core.Entities.Geography.Country", null)
                        .WithMany()
                        .HasForeignKey("PresentInCountriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CorporationFaction", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Faction", null)
                        .WithMany()
                        .HasForeignKey("FactionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Economy.Corporation", null)
                        .WithMany()
                        .HasForeignKey("FinancialBackersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CorporationProfession", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Economy.Corporation", null)
                        .WithMany()
                        .HasForeignKey("CorporationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChronicleKeeper.Core.Entities.Professions.Profession", null)
                        .WithMany()
                        .HasForeignKey("MemberProfessionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CountryCulture", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Cultures.Culture", null)
                        .WithMany()
                        .HasForeignKey("PredominantCulturesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChronicleKeeper.Core.Entities.Geography.Country", null)
                        .WithMany()
                        .HasForeignKey("PredominantInCountriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CountryFaction", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Faction", null)
                        .WithMany()
                        .HasForeignKey("FactionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChronicleKeeper.Core.Entities.Geography.Country", null)
                        .WithMany()
                        .HasForeignKey("OperatesInCountriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CountryGuild", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Economy.Guild", null)
                        .WithMany()
                        .HasForeignKey("GuildsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChronicleKeeper.Core.Entities.Geography.Country", null)
                        .WithMany()
                        .HasForeignKey("PresentInCountriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CountryMilitaryOrganization", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.Geography.Country", null)
                        .WithMany()
                        .HasForeignKey("CountriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Military.MilitaryOrganization", null)
                        .WithMany()
                        .HasForeignKey("MilitaryOrganizationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CountryNation", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.Geography.Country", null)
                        .WithMany()
                        .HasForeignKey("CountriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Nationality.Nation", null)
                        .WithMany()
                        .HasForeignKey("NationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CountryPoliticalParty", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.Geography.Country", null)
                        .WithMany()
                        .HasForeignKey("CountriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Politics.PoliticalParty", null)
                        .WithMany()
                        .HasForeignKey("PoliticalPartiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CountryReligion", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.Geography.Country", null)
                        .WithMany()
                        .HasForeignKey("InCountriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Religions.Religion", null)
                        .WithMany()
                        .HasForeignKey("ReligionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CreatureEcosystem", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.Geography.Ecosystems.Ecosystem", null)
                        .WithMany()
                        .HasForeignKey("HabitantsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChronicleKeeper.Core.Entities.Geography.Creatures.Creature", null)
                        .WithMany()
                        .HasForeignKey("NaturalHabitatsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CultureNation", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Cultures.Culture", null)
                        .WithMany()
                        .HasForeignKey("CultureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Nationality.Nation", null)
                        .WithMany()
                        .HasForeignKey("NationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CultureSapientSpecies", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Cultures.Culture", null)
                        .WithMany()
                        .HasForeignKey("CulturesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChronicleKeeper.Core.Entities.Geography.Creatures.Sapient.SapientSpecies", null)
                        .WithMany()
                        .HasForeignKey("PracticedBySpeciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CultureSocialClass", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Cultures.Culture", null)
                        .WithMany()
                        .HasForeignKey("CulturesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Structure.SocialClass", null)
                        .WithMany()
                        .HasForeignKey("InfluencedSocialClassesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DeityDeity", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.Geography.Creatures.Sapient.Deity", null)
                        .WithMany()
                        .HasForeignKey("AlliedDeitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChronicleKeeper.Core.Entities.Geography.Creatures.Sapient.Deity", null)
                        .WithMany()
                        .HasForeignKey("RivalDeitiesId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DeityReligiousOrder", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.Geography.Creatures.Sapient.Deity", null)
                        .WithMany()
                        .HasForeignKey("DeitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Religions.ReligiousOrder", null)
                        .WithMany()
                        .HasForeignKey("OrdersDedicatedToDeityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FactionGuild", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Economy.Guild", null)
                        .WithMany()
                        .HasForeignKey("ConnectedGuildsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Faction", null)
                        .WithMany()
                        .HasForeignKey("FactionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FactionMilitaryOrganization", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Faction", null)
                        .WithMany()
                        .HasForeignKey("FactionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Military.MilitaryOrganization", null)
                        .WithMany()
                        .HasForeignKey("MilitaryConnectionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FactionPoliticalParty", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Faction", null)
                        .WithMany()
                        .HasForeignKey("FactionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Politics.PoliticalParty", null)
                        .WithMany()
                        .HasForeignKey("PoliticalConnectionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FactionReligiousOrder", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Faction", null)
                        .WithMany()
                        .HasForeignKey("FactionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Religions.ReligiousOrder", null)
                        .WithMany()
                        .HasForeignKey("ReligiousConnectionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FolkloreSapientSpecies", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Cultures.Folklore", null)
                        .WithMany()
                        .HasForeignKey("FolkloreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChronicleKeeper.Core.Entities.Geography.Creatures.Sapient.SapientSpecies", null)
                        .WithMany()
                        .HasForeignKey("OriginatedFromSpeciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GuildProfession", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Economy.Guild", null)
                        .WithMany()
                        .HasForeignKey("GuildsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChronicleKeeper.Core.Entities.Professions.Profession", null)
                        .WithMany()
                        .HasForeignKey("MemberProfessionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GuildSocialClass", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Economy.Guild", null)
                        .WithMany()
                        .HasForeignKey("GuildsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Structure.SocialClass", null)
                        .WithMany()
                        .HasForeignKey("SocialClassesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LanguageNation", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Cultures.Language", null)
                        .WithMany()
                        .HasForeignKey("LanguagesSpokenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Nationality.Nation", null)
                        .WithMany()
                        .HasForeignKey("NationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LocationNaturalResource", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.Geography.Location", null)
                        .WithMany()
                        .HasForeignKey("LocationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Economy.NaturalResource", null)
                        .WithMany()
                        .HasForeignKey("NaturalResourcesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LocationTradeRoute", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.Geography.Location", null)
                        .WithMany()
                        .HasForeignKey("LocationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Economy.TradeRoute", null)
                        .WithMany()
                        .HasForeignKey("TradeRoutesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MilitaryEquipmentMilitaryUnit", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Military.MilitaryEquipment", null)
                        .WithMany()
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Military.MilitaryUnit", null)
                        .WithMany()
                        .HasForeignKey("MilitaryUnitsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NationPoliticalParty", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Nationality.Nation", null)
                        .WithMany()
                        .HasForeignKey("NationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Politics.PoliticalParty", null)
                        .WithMany()
                        .HasForeignKey("PoliticalPartiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NaturalResourceTradeRoute", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Economy.TradeRoute", null)
                        .WithMany()
                        .HasForeignKey("ExportRoutesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Economy.NaturalResource", null)
                        .WithMany()
                        .HasForeignKey("ResourcesTradedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProfessionSapientSpecies", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.Professions.Profession", null)
                        .WithMany()
                        .HasForeignKey("FrequentOccupationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChronicleKeeper.Core.Entities.Geography.Creatures.Sapient.SapientSpecies", null)
                        .WithMany()
                        .HasForeignKey("PracticedBySpeciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProfessionSocialClass", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Structure.SocialClass", null)
                        .WithMany()
                        .HasForeignKey("SocialClassesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChronicleKeeper.Core.Entities.Professions.Profession", null)
                        .WithMany()
                        .HasForeignKey("TypicalProfessionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProfessionTradeSchool", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.Professions.TradeSchool", null)
                        .WithMany()
                        .HasForeignKey("TradeSchoolsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChronicleKeeper.Core.Entities.Professions.Profession", null)
                        .WithMany()
                        .HasForeignKey("TrainedProfessionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RegionSapientSpecies", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.Geography.Region", null)
                        .WithMany()
                        .HasForeignKey("NativeRegionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChronicleKeeper.Core.Entities.Geography.Creatures.Sapient.SapientSpecies", null)
                        .WithMany()
                        .HasForeignKey("OriginOfSapientSpeciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Geography.Creatures.Animals.Animal", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.Geography.Creatures.Animals.Animal", null)
                        .WithMany("PreferredPrey")
                        .HasForeignKey("AnimalId");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Geography.Creatures.Fungi.Fungus", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.Geography.Creatures.Animals.Animal", null)
                        .WithMany("PreferredFungi")
                        .HasForeignKey("AnimalId");

                    b.HasOne("ChronicleKeeper.Core.Entities.Geography.Creatures.Fungi.Fungus", null)
                        .WithMany("RelatedSpecies")
                        .HasForeignKey("FungusId1");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Geography.Creatures.Plants.Plant", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.Geography.Creatures.Animals.Animal", null)
                        .WithMany("PreferredPlants")
                        .HasForeignKey("AnimalId");

                    b.HasOne("ChronicleKeeper.Core.Entities.Geography.Creatures.Plants.Plant", null)
                        .WithMany("RelatedSpecies")
                        .HasForeignKey("PlantId1");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Geography.Creatures.Sapient.SapientSpecies", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Religions.Religion", null)
                        .WithMany("Followers")
                        .HasForeignKey("ReligionId1");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Geography.City", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Economy.EconomicSystem", "EconomicSystem")
                        .WithMany("CitiesUsing")
                        .HasForeignKey("EconomicSystemId");

                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Education.EducationSystem", "EducationSystem")
                        .WithMany("CitiesUsing")
                        .HasForeignKey("EducationSystemId");

                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Faction", null)
                        .WithMany("OperatesInCities")
                        .HasForeignKey("FactionId");

                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Politics.GovernmentSystem", "GovernmentSystem")
                        .WithMany("Cities")
                        .HasForeignKey("GovernmentSystemId");

                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Politics.LegalSystem", "LegalSystem")
                        .WithMany("Cities")
                        .HasForeignKey("LegalSystemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EconomicSystem");

                    b.Navigation("EducationSystem");

                    b.Navigation("GovernmentSystem");

                    b.Navigation("LegalSystem");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Geography.Country", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Economy.EconomicSystem", "EconomicSystem")
                        .WithMany("CountriesUsing")
                        .HasForeignKey("EconomicSystemId");

                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Education.EducationSystem", "EducationSystem")
                        .WithMany("CountriesUsing")
                        .HasForeignKey("EducationSystemId");

                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Politics.GovernmentSystem", "GovernmentSystem")
                        .WithMany("Countries")
                        .HasForeignKey("GovernmentSystemId");

                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Politics.LegalSystem", "LegalSystem")
                        .WithMany("Countries")
                        .HasForeignKey("LegalSystemId");

                    b.Navigation("EconomicSystem");

                    b.Navigation("EducationSystem");

                    b.Navigation("GovernmentSystem");

                    b.Navigation("LegalSystem");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Geography.District", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.Geography.City", null)
                        .WithMany("Districts")
                        .HasForeignKey("CityId");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Geography.Creatures.Sapient.Deity", b =>
                {
                    b.HasOne("ChronicleKeeper.Core.Entities.Social.Religions.Religion", "Religion")
                        .WithMany("Deities")
                        .HasForeignKey("ReligionId");

                    b.Navigation("Religion");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Characters.Abilities.Ability", b =>
                {
                    b.Navigation("AbilityLevel");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Characters.Character", b =>
                {
                    b.Navigation("Educations");

                    b.Navigation("Equipments");

                    b.Navigation("Siblings");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Content.Book.Chapter", b =>
                {
                    b.Navigation("References");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Content.Content", b =>
                {
                    b.Navigation("References");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Content.Movie.Episode", b =>
                {
                    b.Navigation("References");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Geography.Climate.ClimateZone", b =>
                {
                    b.Navigation("TypicalWeatherPatterns");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Geography.Creatures.Creature", b =>
                {
                    b.Navigation("Mutations");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Geography.Location", b =>
                {
                    b.Navigation("Festivals");

                    b.Navigation("HolySites");

                    b.Navigation("Items");

                    b.Navigation("SubLocations");

                    b.Navigation("TimelineEvents");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.HistoryTimelines.History", b =>
                {
                    b.Navigation("Timelines");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.HistoryTimelines.Timeline", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.HistoryTimelines.TimelineEvent", b =>
                {
                    b.Navigation("InvolvedCharacters");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Professions.Profession", b =>
                {
                    b.Navigation("Apprenticeships");

                    b.Navigation("Character");

                    b.Navigation("CorporateLeaderships");

                    b.Navigation("JobRanks");

                    b.Navigation("Specialisations");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Cultures.ArchitectureStyle", b =>
                {
                    b.Navigation("TypicalLocations");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Cultures.CulturalInstitution", b =>
                {
                    b.Navigation("NotableArtists");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Cultures.Culture", b =>
                {
                    b.Navigation("ArchitectureStyles");

                    b.Navigation("ArtForms");

                    b.Navigation("Clothing");

                    b.Navigation("Cuisines");

                    b.Navigation("CulturalInstitutions");

                    b.Navigation("Customs");

                    b.Navigation("Folktales");

                    b.Navigation("Myths");

                    b.Navigation("Traditions");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Cultures.Folklore", b =>
                {
                    b.Navigation("RelatedEvents");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Cultures.Language", b =>
                {
                    b.Navigation("Cultures");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Economy.BankingSystem", b =>
                {
                    b.Navigation("FinancialInstitutions");

                    b.Navigation("UsedInEconomicSystems");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Economy.Corporation", b =>
                {
                    b.Navigation("Apprenticeships");

                    b.Navigation("Leadership");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Economy.EconomicSystem", b =>
                {
                    b.Navigation("CitiesUsing");

                    b.Navigation("CountriesUsing");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Economy.ExtractionMethod", b =>
                {
                    b.Navigation("ResourcesExtracted");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Economy.Guild", b =>
                {
                    b.Navigation("Alumni");

                    b.Navigation("Apprenticeships");

                    b.Navigation("GuildRanks");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Economy.TaxationSystem", b =>
                {
                    b.Navigation("TaxedCorporations");

                    b.Navigation("TaxedGuilds");

                    b.Navigation("UsedInEconomicSystems");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Education.EducationSystem", b =>
                {
                    b.Navigation("CitiesUsing");

                    b.Navigation("CountriesUsing");

                    b.Navigation("GuildsProvidingEducation");

                    b.Navigation("Schools");

                    b.Navigation("Universities");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Education.School", b =>
                {
                    b.Navigation("Alumni");

                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Education.University", b =>
                {
                    b.Navigation("Alumni");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Education.UniversityMajor", b =>
                {
                    b.Navigation("Professors");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Faction", b =>
                {
                    b.Navigation("Army");

                    b.Navigation("NotableItemsInPossesion");

                    b.Navigation("OperatesInCities");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Military.Army", b =>
                {
                    b.Navigation("Units");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Military.MilitaryDoctrine", b =>
                {
                    b.Navigation("MilitaryOrganizationsUsing");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Military.MilitaryOrganization", b =>
                {
                    b.Navigation("Armies");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Military.MilitaryUnit", b =>
                {
                    b.Navigation("Ranks");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Nationality.Nation", b =>
                {
                    b.Navigation("Characters");

                    b.Navigation("StateReligions");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Politics.GovernmentSystem", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("Countries");

                    b.Navigation("PoliticalParties");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Politics.LegalSystem", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("Countries");

                    b.Navigation("Guilds");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Politics.PoliticalIdeology", b =>
                {
                    b.Navigation("AffiliatedGovernmentSystems");

                    b.Navigation("AffiliatedPoliticalParties");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Religions.Religion", b =>
                {
                    b.Navigation("Cultures");

                    b.Navigation("Deities");

                    b.Navigation("Followers");

                    b.Navigation("HolySites");

                    b.Navigation("Myths");

                    b.Navigation("ReligiousOrders");

                    b.Navigation("ReligiousTexts");

                    b.Navigation("Traditions");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Religions.ReligiousOrder", b =>
                {
                    b.Navigation("ClergyTraining");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Structure.SocialClass", b =>
                {
                    b.Navigation("Members");

                    b.Navigation("PrivilegeLaws");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Social.Structure.SocialHierarchy", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("Nations");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Content.Book.Book", b =>
                {
                    b.Navigation("Chapters");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Content.Movie.Series", b =>
                {
                    b.Navigation("Episodes");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Geography.Creatures.Animals.Animal", b =>
                {
                    b.Navigation("PreferredFungi");

                    b.Navigation("PreferredPlants");

                    b.Navigation("PreferredPrey");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Geography.Creatures.Fungi.Fungus", b =>
                {
                    b.Navigation("Hosts");

                    b.Navigation("RelatedSpecies");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Geography.Creatures.Plants.Plant", b =>
                {
                    b.Navigation("Hosts");

                    b.Navigation("RelatedSpecies");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Geography.Creatures.Sapient.SapientSpecies", b =>
                {
                    b.Navigation("Characters");

                    b.Navigation("Races");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Geography.City", b =>
                {
                    b.Navigation("Army");

                    b.Navigation("CulturalInstitutions");

                    b.Navigation("Districts");

                    b.Navigation("MajorIndustries");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Geography.Country", b =>
                {
                    b.Navigation("MajorIndustries");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Professions.TradeSchool", b =>
                {
                    b.Navigation("Apprenticeships");
                });

            modelBuilder.Entity("ChronicleKeeper.Core.Entities.Geography.Creatures.Sapient.Deity", b =>
                {
                    b.Navigation("MajorMyths");

                    b.Navigation("SacredSitesOfDeity");

                    b.Navigation("SacredTexts");
                });
#pragma warning restore 612, 618
        }
    }
}
